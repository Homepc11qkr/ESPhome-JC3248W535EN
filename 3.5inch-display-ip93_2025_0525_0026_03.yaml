# # 2025_0522_1355_02 update

esphome:
  name: ${name} # 3-display-ip93  # 이름 지정 변경
  friendly_name: ${friendly_name} #  3-display-ip  # 이름 지정 변경
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
 
esp32:
  board: esp32-s3-devkitc-1 # 기본 설치 이름
  flash_size: 16MB
  partitions: "default_16MB.csv" # 파티션 설정후 usb로 install
  framework:
    type: esp-idf
    # esphome ver 25.5
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal # 파티션 설정후 usb로 install
  speed: 80MHz # 120mhz is not supported and falls back to 40mhz # 파티션 설정후 usb로 install
 
logger:
  level: INFO
  baud_rate: 921600 

# web_server:

spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus

 
display:
  - platform: qspi_dbi
    model: axs15231
    data_rate: 40MHz
    id: my_display
    spi_id: display_qspi
    dimensions:
      height: 480
      width: 320
    cs_pin: 45
    rotation: 90 # 90 for landscape, 0 for portrait
    auto_clear_enabled: false

touchscreen:
  - platform: axs15231
    id: my_touch
    display: my_display
    i2c_id: touchscreen_bus
    calibration:
      x_min: 0
      x_max: 461
      y_min: 0
      y_max: 310
    transform:
      swap_xy: true
      mirror_y: true
    on_touch:
      - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
          );
      - script.execute: light_up


sun:
  id: sun_time
  latitude: $latitude     
  longitude: $longitude   

time:
  - platform: sntp
    id: my_time
    timezone: "Asia/Seoul"

  - platform: homeassistant
    id: home_time
    on_time:
      # 매 분 0초마다 실행 (최적화)
      - seconds: 0
        then:
          - script.execute: time_update
          - script.execute: date_update

interval:
  - interval: 1s
    then:
      - script.execute: date_update
      - script.execute: time_update

# -----------------------------------------------------------------
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      bssid: "58:86:94:2A:4C:6C"
# wifi 추가
      # bssid: "58:86:94:2A:4C:6C" # AX8004M 58:86:94:2A:4C:6C # mac은 esphome에서 사전 bssid 설정후 확인 정보로 적용
      # bssid: "58:86:94:88:E3:70" # A3-MU  58:86:94:88:E3:70 # mac은 esphome에서 사전 bssid 설정후 확인 정보로 적용
      # bssid: "58:86:94:E6:94:F0" # ax3000 58:86:94:E6:94:F0 # mac은 esphome에서 사전 bssid 설정후 확인 정보로 적용      
      manual_ip:
        static_ip: 192.168.0.93
        gateway: 192.168.0.1
        subnet: 255.255.255.0
        dns1: 8.8.8.8
        dns2: 8.8.4.4
  output_power: 20.0
  fast_connect: true
  power_save_mode: none
  reboot_timeout: 0s  # fallback AP 열린 상태에서도 절대 재부팅하지 않음
  ap:
    ssid: "fallback_ap_ip93"
    password: "fallback_password"
    # ap_timeout 제거! 항상 fallback AP 유지

  on_connect:
    then:
      - logger.log: "Wi-Fi Connected! Showing booting page..."
      - lvgl.page.show: page_booting

api:
  encryption:
    key: "9gn0oyn0We23zsih3l6MHryUa1vvjaRLcdW6p24OM0o="

  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant"));'
        then:
          - logger.log: "Home Assistant Connected!"
          - lvgl.widget.show: ap_connected
          - lvgl.widget.show: ap_connected_booting
          - lvgl.widget.hide: ap_disconnected
          - lvgl.widget.hide: ap_disconnected_booting
          - delay: 5s
          - logger.log: "Moving to all_page_menu after HA connection"
          - lvgl.page.show: all_page_menu

  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant"));'
        then:
          - logger.log: "Home Assistant Disconnected!"
          - lvgl.widget.hide: ap_connected
          - lvgl.widget.show: ap_disconnected
          - lvgl.widget.hide: ap_connected_booting
          - lvgl.widget.show: ap_disconnected_booting 
          - logger.log: "Waiting for Home Assistant to reconnect..."
          - lvgl.page.show: page_booting
          - wait_until:
              condition:
                lambda: 'return (0 == client_info.find("Home Assistant"));'
              timeout: 15s
          - logger.log: "Moving to all_page_menu after waiting"
          - lvgl.page.show: all_page_menu


ota:
  - platform: esphome
    password: "59773ca1c89f95aee4fca94f8ad49eae"

captive_portal:
#################  =======================  wifi 연결후  화면보이게 작업 영역 ==============  
substitutions:
  update_date: "2025_0405_1135_45"
  esphome_version: "sensor.3_display_ip93_esphome_version"
  # image_background: "images/bg_800x430.jpg"
  tabview_name_5: "\U000F0439"
  tabview_id_5: "Radio_tab_3"   
  # font_20 송하 # font_25 않을때
  latitude: "37.278948"    # 해뜨는/해지는 시각 집의 위도 입력 > https://www.google.com/maps/ 위치공유  37.278948, 127.071859
  longitude: "127.071859"   #  https://www.google.com/maps/  자동차 사람이 갈수 있는 도로에 위도 경도 찾기 > 아무도로에서 > 위치 공유
  font_characters: " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#%'()+,-./:;<=>?@[]_{|}°²³↑↓♬⊙열파아노연주됩취요송하않을때앰프불계가거고경과관괄구금기나날남내냉너니늘다대데더도동드등라량러력로륨리릴마많맑매먼메명모목몰문미밖발방버번베보복볼북블비쁨사샤서선세센소속수스습시식신실씨악안알앞어없에엘영오온옴옷외용우워원월위으음이인일자작장재저적전제조존좋집체초최출침카커컴콜쾌탁탠터토통튼팬폭풍퓨피한향험현호화흐름또는천둥개박무황강돌홈지정후치텍족성확람디택설청년은밤림눈바달난환"
  font_info_characters: " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#%'()+,-./:;<=>?@[]_{|}°²³↑↓♬⊙가나다라서에여영오외용우원월음절제종합부산텍린공휴탄네반모임머님광추석연글크힘호짜년생결혼념후정하대경도확민국흥덕로길디수성치통구인기날일보동세금스신고어사복작시개천한리마홈현충끝번"
  date_characters: " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#%'()+,-./:;<=>?@[]_{|}°²³↑↓♬⊙월화수목금토일년요주야오전후"
  # ---------------------------------------------------------------
  entity_id_energy_meter_power: "sensor.power_meter_2port_power_a"   #  마이하우스 전력사용량

  entity_id_light_bookroom_sw2: "switch.seojae_bul_left" # 
  entity_id_light_bookroom_sw2_name: "서재불"

  entity_id_computer_switch: "switch.pconoff_socket_1" #switch.pc_socket_1"
  entity_id_computer_switch_name: "pc_on"
  
  entity_id_monitor_plug_switch: "switch.moniteo_switch_1"
  entity_id_monitor_plug_switch_name: "pc_off"

  entity_id_computer_amp_on_esp32: "switch.esp32_c3_supermini_ip55_sound_amp_on" # switch.esp32_c3_supermini_ip55_sound_amp_on"
  entity_id_computer_amp_off_esp32: "switch.esp32_c3_supermini_ip55_sound_usb_off" #switch.esp32_c3_supermini_ip55_sound_usb_off"
  weather_wn_home: "weather.wn_suwon" # weather.wn_home"
  entity_id_home_temperature_feels: "sensor.wn_home_temperature_feels_like" # sensor.cegamondo # 체감온도 sensor.naver_weather_todayfeeltemp_1
  # entity_id_weather_nowweather_Current1: "weather.wn_home" # 
  entity_id_home_current_condition_wn: "sensor.wn_home_current_condition"
  weather_daily_forecast_wn_home_entity_id: "sensor.weather_daily_forecast_wn_home" ## 별도 속성 정보 만든 weather.wn_home 센서임" # 
  # ----------------------- 전등 =============================
  entity_id_lbl_btn_light_1: "light.ttlto485s3_ip85_light_living_room" ### 거실불
  entity_id_lbl_btn_light_name_1: "거실불"
  entity_id_lbl_btn_light_2: "light.ttlto485s3_ip85_light_living_room2" ### 거실불2
  entity_id_lbl_btn_light_name_2: "거실불2"
  entity_id_lbl_btn_light_3: "light.ttlto485s3_ip85_light_bogdo" ### 복도불
  entity_id_lbl_btn_light_name_3: "복도불"
  entity_id_lbl_btn_light_4: "light.ttlto485s3_ip85_light_front" ### 앞불
  entity_id_lbl_btn_light_name_4: "앞불"
  entity_id_lbl_btn_light_5: "light.ttlto485s3_ip85_light_sofa" ### 소파불
  entity_id_lbl_btn_light_name_5: "소파불"
  entity_id_lbl_btn_light_6: "switch.bogdo_hwajangsil_switch_2" ### 복도샤워불
  entity_id_lbl_btn_light_name_6: "복도샤워불"
  entity_id_lbl_btn_light_7: "switch.jageunbang_jeondeung_switch_2" ### 작은방불
  entity_id_lbl_btn_light_name_7: "작은방불"
  entity_id_lbl_btn_light_8: "switch.jubang_switch_2" ### 주방불
  entity_id_lbl_btn_light_name_8: "주방불"
  entity_id_lbl_btn_light_9: "switch.jubang_switch_1" ### 식탁불
  entity_id_lbl_btn_light_name_9: "식탁불"
  entity_id_lbl_btn_light_10: "switch.anbang_bul_l2" ###  안방불
  entity_id_lbl_btn_light_name_10: "안방불"
  entity_id_lbl_btn_light_11: "switch.anbang_bul_l1" ###  화장대
  entity_id_lbl_btn_light_name_11: "화장대"
  entity_id_lbl_btn_light_12: "switch.cimdae_bul_left_2" ###  침대불
  entity_id_lbl_btn_light_name_12: "침대불"
  entity_id_lbl_btn_light_13: "switch.anbang_hwajangsil_switch_2" ###  안방샤워불
  entity_id_lbl_btn_light_name_13: "안방샤워불"
  entity_id_lbl_btn_light_14: "switch.dooropen_socket_1" ###  현관문열기
  entity_id_lbl_btn_light_name_14: "현관문열기"
  entity_id_lbl_btn_light_15: "switch.sonoff_100173eaad" ###  엘베콜
  entity_id_lbl_btn_light_name_15: "엘베콜"
  entity_id_lbl_btn_light_16: "switch.hyeongwanilgwalsodeung_zigbee_left" ###  일괄소등
  entity_id_lbl_btn_light_name_16: "일괄소등"
# =====================================================  
  entity_id_lbl_btn_switch_name_1: "서재불"
  entity_id_lbl_btn_switch_1: "switch.seojae_bul_left"
  entity_id_lbl_btn_switch_name_2: "TV전원"
  entity_id_lbl_btn_switch_2: "switch.tv_socket_1"
  
# =====================================================  

#  # substitutions:
  entity_id_lbl_btn_climate_1: "climate.ttlto485s3_ip85_boiler_big_room"
  entity_id_lbl_btn_climate_name_1: "안방보일러"
 
  entity_id_lbl_btn_climate_2: "climate.ttlto485s3_ip85_boiler_living_room"
  entity_id_lbl_btn_climate_name_2: "거실보일러"

  entity_id_lbl_btn_climate_3: "climate.ttlto485s3_ip85_boiler_book_room"
  entity_id_lbl_btn_climate_name_3: "서재보일러"

  entity_id_lbl_btn_climate_4: "climate.ttlto485s3_ip85_boiler_small_room"
  entity_id_lbl_btn_climate_name_4: "작방보일러" 
# =====================================================  
# substitutions: 에 추가 label  및 url 추가
  media_entities_1: "media_player.nest_hub_seojae" # change item # 사용중인 구글 스피커1
  media_entities_2: "media_player.nest_audio_geosil" # change item # 사용중인 구글 스피커2
  media_entities_3: "media_player.gigi" # change item # 사용중인 구글 스피커3   media_player.gigi

 
  number_media_volume: "number.3_display_ip93_media_volume"  #   number.3_display_ip93_media_volume
  Alarm_mp3: "https://ha.11q.kr/local/media/start_bell_sound.mp3"
  off_mp3: "https://ha.11q.kr/local/media/off.mp3"
  radio_ddns_or_ip: "http://192.168.0.35:3005"  # change item 라디오 URL는 시놀로지 역방향 프록시 설정 사용
 
# --------------------------------------------------------
  radio_name_0: "피아노 연주"
  Radio_frequency_0: "mp3"
  Radio_frequency_f0: "pianolovesongsever.mp3"
  radio_url_0: "https://ha.11q.kr/local/media/pianolovesongsever.mp3" # 동작성공

  radio_name_1: "YTN"
  Radio_frequency_1: "945"
  Radio_frequency_f1: "YTN 94.5_"
  radio_url_1: "${radio_ddns_or_ip}/radio?keys=ytn&token=homeassistant"

  radio_name_2: "TBS@"
  Radio_frequency_2: "1013"
  Radio_frequency_f2: "TBS@ 101.3_"
  radio_url_2: "https://cdnfm.tbs.seoul.kr/tbs/_definst_/tbs_fm_web_360.smil/playlist.m3u8"

  radio_name_3: "TBN"
  Radio_frequency_3: "1039"
  Radio_frequency_f3: "TBN 103.9_"
  radio_url_3: "${radio_ddns_or_ip}/radio?keys=tbnfm&token=homeassistant"

  radio_name_4: "TBSeFM@"
  Radio_frequency_4: "1013"
  Radio_frequency_f4: "TBSeFM@ 101.3_"
  radio_url_4: "https://cdnefm.tbs.seoul.kr/tbs/_definst_/tbs_efm_web_360.smil/playlist.m3u8"

  radio_name_5: "EBS"    
  Radio_frequency_5: "939"
  Radio_frequency_f5: "EBS 93.9"
  radio_url_5: "${radio_ddns_or_ip}/radio?keys=ebsfm&token=homeassistant"
  
  radio_name_6: "CBS_Music" 
  Radio_frequency_6: "981"   
  Radio_frequency_f6: "CBS_Music 98.1_"
  radio_url_6: "${radio_ddns_or_ip}/radio?keys=cbs_music_fm&token=homeassistant"
  
  radio_name_7: "CBS"
  Radio_frequency_7: "1077"
  Radio_frequency_f7: "CBS 107.7_"
  radio_url_7: "${radio_ddns_or_ip}/radio?keys=cbs_fm&token=homeassistant"
  
  radio_name_8: "KBS_Cool"
  Radio_frequency_8: "1035"
  Radio_frequency_f8: "KBS_Cool 103.5_"
  radio_url_8: "${radio_ddns_or_ip}/radio?keys=kbs_cool&token=homeassistant"
  
  radio_name_9: "KBS_Happy"
  Radio_frequency_9: "891"
  Radio_frequency_f9: "KBS_Happy 89.1_"
  radio_url_9: "${radio_ddns_or_ip}/radio?keys=kbs_happy&token=homeassistant"
  
  radio_name_10: "KBS_Classic"
  Radio_frequency_10: "1061"
  Radio_frequency_f10: "KBS_Classic 106.1_"
  radio_url_10: "${radio_ddns_or_ip}/radio?keys=kbs_classic&token=homeassistant"
  
  radio_name_11: "KBS1"
  Radio_frequency_11: "931"
  Radio_frequency_f11: "KBS1 93.1_"
  radio_url_11: "${radio_ddns_or_ip}/radio?keys=kbs_1radio&token=homeassistant"
  
  radio_name_12: "KBS3"
  Radio_frequency_12: "973"
  Radio_frequency_f12: "KBS3 97.3_"
  radio_url_12: "${radio_ddns_or_ip}/radio?keys=kbs_3radio&token=homeassistant"
  
  radio_name_13: "SBS_Power"
  Radio_frequency_13: "1049"
  Radio_frequency_f13: "SBS_Power 104.9_"
  radio_url_13: "${radio_ddns_or_ip}/radio?keys=sbs_power&token=homeassistant"
  
  radio_name_14: "SBS Love"
  Radio_frequency_14: "959"    
  Radio_frequency_f14: "SBS Love 95.9_" 
  radio_url_14: "${radio_ddns_or_ip}/radio?keys=sbs_love&token=homeassistant"

  radio_name_15: "MBC"
  Radio_frequency_15: "919"
  Radio_frequency_f15: "MBC 91.9_" 
  radio_url_15: "${radio_ddns_or_ip}/radio?keys=mbc_fm&token=homeassistant"

  radio_name_16: "MBC_FM4U"
  Radio_frequency_16: "1045"
  Radio_frequency_f16: "MBC_FM4U 104.5_"
  radio_url_16: "${radio_ddns_or_ip}/radio?keys=mbc_fm4u&token=homeassistant"

  radio_name_17: "Jazz"
  Radio_frequency_17: "950"
  Radio_frequency_f17: "Jazz_"
  radio_url_17: "http://streams.greenhost.nl:8080/jazz"

  radio_name_18: "piano_playlist"
  Radio_frequency_18: "950"
  Radio_frequency_f18: "piano_playlist.mp3_"
  radio_url_18: "https://11q.kr/media/piano_playlist.mp3 "  #  ## 성공

  radio_name_19: "Arirang@" 
  Radio_frequency_19: "88"
  Radio_frequency_f19: "Arirang@_"
  radio_url_19: "https://amdlive-ch03-ctnd-com.akamaized.net/arirang_3ch/smil:arirang_3ch.smil/playlist.m3u8" # 동작성공
  name: "3-display-ip93"  # 이름 지정 변경
  friendly_name: "3-display-lvgl-ip93"  # 이름 지정 변경
# =====================================================  


# 폰트 설정
font:

  - file: "fonts/materialdesignicons-webfont2.ttf" # 4개의 메뉴큰 아이콘
    id: icon_font_30
    size: 20
    bpp: 4
    glyphs: [
          "\U000F0335", # mdi:lightbulb  U000F0335
          "\U000F1A24", ## 스위치20 switch off icon
          "\U000F1A3A",  # fan
          "\U000F0CDD", # icon_back back_icon
          ]

  - file: "fonts/materialdesignicons-webfont2.ttf" # 4개의 메뉴큰 아이콘
    id: icon_font_50
    size: 50
    bpp: 4
    glyphs: [
          "\U000F0595", # mdi:weather-partly-cloudy
          "\U000F0335", # mdi:lightbulb
          "\U000F0F54", # mdi:home-thermometer
          "\U000F0493", # mdi:cog  U000F154E
          "\U000F0439", # radio icon
          "\U000F097E", # 스위치 icon
          "\U000F154E", # 그래프 icon
          "\U000F1C6D", # INFO icon
          "\U000F0769", # ceiling-light
          "\U000F0FA8",  # # ON U000F0FA8 off U000F05CE
          "\U000F05CE",  # # ON U000F0FA8 off U000F05CE          
          "\U000F0E71", # alarm
          "\U000F0E17",  # calendar
          "\U000F1443",  # clock
          "\U000F1A24", ## 스위치20 switch off icon
          "\U000F07C1", # dip switch
          ]  

  - file: "gfonts://Noto Emoji" # 이모지(🌅, 🌇 같은 유니코드 아이콘)는 포함
    id: font_50g
    size: 50

  - file: "gfonts://Roboto"
    id: roboto_100
    size: 100

  - file: "gfonts://Roboto"
    id: roboto_70
    size: 70
 
  - file: "fonts/D2Coding.ttf"  # 숫자 전용 고정 폭 폰트
    id: font_D_90
    size: 90
    bpp: 4

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_big50
    size: 50
    bpp: 4    
    glyphs: ${date_characters}

  - file: "gfonts://Roboto"
    id: font_15
    size: 15

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_20
    size: 20
    bpp: 4    
    glyphs: ${font_characters}

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_21
    size: 21
    bpp: 4
    glyphs: ${font_characters}

  - file: "fonts/MaruBuri-Bold.ttf"   
    id: font_22
    size: 23
    bpp: 4
    glyphs: ${font_characters}
    extras:
      - file: 'fonts/materialdesignicons-webfont2.ttf' # http://materialdesignicons.com/cdn/7.4.47/  
        glyphs: [
          "\U000F0335", # mdi:lightbulb
          "\U000F0336", # mdi-lightbulb-outline
          "\U000F07C0", # mdi-desktop-classic
          "\U000F097E",  #
          "\U000F1A3A",  # fan
          "\U000F1A25",  # 스위치
          "\U000F057E", # 스피커
          ]      

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_25 ### 하단 탭아이콘
    size: 25
    bpp: 4
    glyphs: ${font_characters}
    # U000F1443  하단 tabview 아이콘구성
    extras:
      - file: 'fonts/materialdesignicons-webfont2.ttf'  
        glyphs: [
          "\U000F1443", # 메뉴 demo
          "\U000F0EBA", # tabview
          "\U000F151B", # demo
          "\U000F0335", # mdi:lightbulb
          "\U000F0336", # mdi-lightbulb-outline
          "\U000F07C0", # mdi-desktop-classic
          "\U000F097E",  #
          "\U000F1A3A",  # fan
          "\U000F1A25",  # 스위치
          "\U000F057E", # 스피커  
          "\U000F0F54", # 보일러 탭아이콘 
          "\U000F1A24", #  
          "\U000F0439", ## RADIO ICON  라디오아이콘      
          "\U000F0425",
          
          ]  

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_25i
    size: 25
    bpp: 4
    glyphs: ${font_info_characters}

  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_26
    size: 26
    bpp: 4
    glyphs: ${font_characters}
    extras:
      - file: 'fonts/materialdesignicons-webfont2.ttf'  
        glyphs: [
          "\U000F0425", # power icon 
          "\U000F057E", # 스피커
          ]  

# font_info_characters
  - file: "fonts/MaruBuri-Bold.ttf"    
    id: font_30
    size: 30
    bpp: 4
    glyphs: ${font_characters}  
    extras:
      - file: 'fonts/materialdesignicons-webfont2.ttf' # materialdesignicons-webfonts.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
        glyphs: [
          "\U000F0318", # ap-connected
          "\U000F0319",  # ap-disconnected
          "\U000F0128", # chart bar icon 1       
          "\U000F0335", # lightbulb 2
          "\U000F0F54", #  button3 temp
          "\U000F0439", # 라디오 4번 BUTTON4
          "\U000F0493", # setting icon 5
          "\U000F1452", # # time 7 icon
          "\U000F02DC", # home-icon 1
          "\U000F0425", # power icon 
          "\U000F0FA8", #  절전 on lbl_idle_screen_timeout_check_on
          "\U000F0E71", # ALARM ICON 알람아이콘
          "\U000F16C5",  # wifi_disconnected
          "\U000F05A9",  # wifi connect 
          "\U000F092F", # wifi 0% 
          "\U000F091F", # wifi 40% 
          "\U000F0922", # wifi 60% 
          "\U000F0925", # wifi 80% 
          "\U000F0928", # wifi 100% 
          "\U000F05CE", # ScreenOff[x]
          "\U000F0D90", # backlight_off
          ]
# --------------------------------------------------
# s:\esphome\fonts\D2Coding.ttf 
  - file: "fonts/D2Coding.ttf"  # 숫자 전용 고정 폭 폰트
    id: font_i_30
    size: 30
    bpp: 4
    glyphs: ${font_info_characters}  

  - file: "fonts/D2Coding.ttf"    
    id: font_40
    size: 40
    bpp: 4
    glyphs: ${font_characters}


  - file: "fonts/materialdesignicons-webfont2.ttf"    
    id: font_ap100
    size: 70
    bpp: 4
    glyphs: [
          "\U000F0318", # ap-connected
          "\U000F0319",  # ap-disconnected
          "\U000F16C5",  # wifi_disconnected
          "\U000F05A9",  # wifi connect 
           ]    

# ============================================================
 
image:
 
# ----------------------------------------------
  - file: "images/12-sunny.png"
    id: sunny
    type: RGB565
    resize: 150x150
    transparency: alpha_channel

  - file: "images/2-cloudy.png"
    id: cloudy
    type: RGB565
    resize: 150x150
    transparency: alpha_channel

  - file: "images/1-clear-night.png"
    id: clearnight
    type: RGB565
    resize: 150x150
    transparency: alpha_channel
          
  - file: "images/4-hail.png"
    id: hail
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    
    
  - file: "images/5-lightning.png"
    id: lightning
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    
    
  - file: "images/7-partlycloudy.png" # nightpartlycloud.png
    id: nightpartlycloud
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    
    
  - file: "images/7-partlycloudy.png"
    id: partlycloud
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    
        
  - file: "images/8-pouring.png"
    id: pouring
    type: RGB565
    resize: 150x150
    transparency: alpha_channel
    
  - file: "images/9-rainy.png"
    id: rainy
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    
    
  - file: "images/10-snowy.png"
    id: snowy
    type: RGB565
    resize: 150x150
    transparency: alpha_channel

  - file: "images/13-windy.png"
    id: windy
    type: RGB565
    resize: 150x150
    transparency: alpha_channel    

# image:
  - file: "images/icons8_sound.png"
    id: icons8_sound_png
    type: RGB565
    resize: 150x150
    transparency: alpha_channel  # 투명적용

  - file: "images/icons8_idle.png"
    id: icons8_idle_png
    type: RGB565
    resize: 150x150
    transparency: alpha_channel  # 투명적용

  - file: "images/icons8_nosound.png"
    id: icons8_nosound_png
    type: RGB565
    resize: 150x150
    transparency: alpha_channel  # 투명적용

# ############################################ @font:

output:
  - platform: ledc
    pin: GPIO1
    id: backlight

light:
  - platform: monochromatic
    output: backlight
    name: "backlight_Light" 
    restore_mode: ALWAYS_ON
    id: backlight_light_id
#### ----------------------------------
    on_turn_on: 
      then:
        - switch.turn_on:     # 스위치 상태를 OFF로 설정
            id: backlight_switch_id          

        - number.set:  # 슬라이더 값과 동기화
            id: backlight_brightness_number
            value: !lambda return id(backlight_brightness_number).state;

        - light.control:  # 백라이트 밝기 설정
            id: backlight_light_id
            brightness: !lambda return id(backlight_brightness_number).state / 100;

        - lvgl.slider.update:  # 슬라이더 값도 동기화
            id: slide_brightness
            value: !lambda return id(backlight_brightness_number).state;
 
    on_turn_off: 
      then:
        - lvgl.pause:
        - switch.turn_off:     # 스위치 상태를 OFF로 설정
            id: backlight_switch_id          

# --------------------------------------
switch:
  - platform: output
    output: backlight
    id: backlight_switch_id
    name: "backlight_switch"
    restore_mode: ALWAYS_ON
    on_turn_on: 
      then:
        - light.turn_on:     # 스위치 상태를 OFF로 설정
            id: backlight_light_id    
    on_turn_off: 
      then:
        - light.turn_off:     # 스위치 상태를 OFF로 설정
            id: backlight_light_id        
# --------------------------------------------------------------------------------------------------------------
  - platform: factory_reset
    name: Restart with Factory Default Settings  

  - platform: restart
    name: "Restart Node"
    id: restart_id

button:
  - platform: template
    name: "tab_time_button"
    id: Button_tab_time
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 0
            animated: true  
  - platform: template
    name: "tab_home_button"
    id: Button_tab_home
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 1
            animated: true
  - platform: template
    name: "tab_right_button"
    id: Button_tab_right
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 2
            animated: true
  - platform: template
    name: "tab_switch_button"
    id: Button_tab_switch
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 3
            animated: true
  - platform: template
    name: "tab_climate_button"
    id: Button_tab_climate
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 4
            animated: true
  - platform: template
    name: "tab_radio_button"
    id: Button_tab_radio
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 5
            animated: true
  - platform: template
    name: "tab_info_button"
    id: Button_tab_info
    on_press:
      then:
        - lvgl.tabview.select:
            id: tabview_all_page_menu
            index: 6
            animated: true

################ ------------  number ---------------------------
number: 
  - platform: template
    name: "BackLight Brightness"
    optimistic: true
    id: backlight_brightness_number
    unit_of_measurement: "%"
    initial_value: 60
    restore_value: true
    min_value: 10
    max_value: 90
    step: 1
    mode: box
    # on_value: 
    on_value: 
      then:
        - lvgl.slider.update: 
            id: slide_brightness
            value: !lambda return x;

        - lvgl.label.update:
            id: back_light_in_text
            text: !lambda |-
              static char buf[15];
              int brightness_value = (int)id(backlight_brightness_number).state;
              snprintf(buf, sizeof(buf), "%d%%", brightness_value);  // 🔹 "%" 단위로 변경
              return std::string(buf);

        - light.control:  # 백라이트 밝기 설정
            id: backlight_light_id
            brightness: !lambda return id(backlight_brightness_number).state / 100;

        - lvgl.resume:

  - platform: template
    name: "media_volume"  
    optimistic: true
    id: speaker_media_volume
    unit_of_measurement: "%"
    initial_value: 50
    restore_value: true    
    min_value: 10
    max_value: 99
    step: 1
    mode: box
    on_value:
      - homeassistant.action:
          action: media_player.volume_set
          data: 
            entity_id: !lambda 'return id(selected_media_entity).state;'
            volume_level: !lambda 'return (x / 100);' 

# ===================== sensor:==============================
# ============================================================
sensor:
# sensor:  aircon_set_temp_arc44
  - platform: homeassistant
    id: speaker_vol_44
    entity_id: ${media_entities_1}  # media_player.nest_hub_seojae
    attribute: volume_level
    on_value:
      - then:
          # Arc 위젯 업데이트
          - lvgl.arc.update:
              id: aircon_set_temp_arc44
              value: !lambda |-
                return (x * 100);
              anim_time: 500ms  # 애니메이션 시간

          # 라벨 업데이트
          - lvgl.label.update:
              id: volume_label_44
              text: !lambda |-
                static char buf[15];
                float percentage = x * 100;  // 볼륨 퍼센티지 계산
                snprintf(buf, sizeof(buf), "%.0f%%", percentage); 
                return {buf};

# sensor:
  - platform: homeassistant
    id: sensor_wn_home_temperature1
    entity_id: sensor.wn_home_temperature  
 

## ================================================   alarm_time 알람시계
# 와이파이 신호세기 font_30  ## wifi_40 wifi_connection_signal  esphome의 entity_id 이용
# sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    # internal: true
    entity_category: "diagnostic"

# sensor:
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_signal_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""
    icon: mdi:wifi
 
  - platform: copy
    id: wifi_connection
    source_id: wifi_signal_percent
    on_value:
      - lvgl.label.update:
          id: wifi_connection_signal
          text: !lambda |-
            static char buf[25];
            std::string icon;
            if (x == 100.0) {
            icon = "\U000F05A9"; // wifi (full 사선)  font_30  
            } else if (x > 98) {
            icon = "\U000F05A9"; // wifi_98  
            } else if (x > 95) {
            icon = "\U000F0928"; // wifi_95                             
            } else if (x > 80) {
            icon = "\U000F0925"; // wifi_80
            } else if (x > 60) {
            icon = "\U000F0922"; // wifi_60
            } else if (x > 40) {
            icon = "\U000F091F"; // font_30  ## wifi_40
            } else if (x > 0) {
            icon = "\U000F092F"; // wifi_0
            }
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_percent
    name: "label_wifi_signal_percent_2"
    id: wifi_signal_percent_2
    accuracy_decimals: 1
    on_value:
      - lvgl.label.update:
          id: label_wifi_signal_percent2_txt
          text:
            format: " \U000F05A9 %.0f%%"                     
            args: [ 'x' ]   
# U000F0928                     
                                          
# HA Energy Sensor
  # entity_id_energy_meter_power: "sensor.power_meter_2port_power_a"   #  마이하우스 전력사용량
  - platform: homeassistant
    entity_id: ${entity_id_energy_meter_power}
    name: "energy meter power"
    id: energy_meter_power
    accuracy_decimals: 1          
    on_value:
      - lvgl.label.update:
          id: energy_meter_power_title
          text: !lambda |-
            static char buf[32];
            snprintf(buf, sizeof(buf), "%.0fW", x);
            return {buf};

  - platform: homeassistant
    entity_id: ${entity_id_home_temperature_feels} # sensor.wn_entity_id_home_temperature_feels_like # sensor.cegamondo # 체감온도 sensor.naver_weather_todayfeeltemp_1
    name: wn weather todayfeeltemp
    id: wn_weather_todayfeeltemp_1
    on_value:
      - lvgl.label.update:
          id: home_weather_now_temp
          text:
            format: "%.0f°"
            args: [ 'x' ]
 
# ============================================================================================= 
  - platform: homeassistant
    id: climate_censor_slider_update1
    entity_id: ${entity_id_lbl_btn_climate_1} #  
    attribute: temperature
    on_value:
      - lvgl.slider.update:
          id: slide_climate_1
          value: !lambda 'return (int) x;' 

      - lvgl.label.update:
          id: slide_climate_txt_1  
          text: !lambda |-
            static char buf[10];
            snprintf(buf, sizeof(buf), "%.0f°C", x);
            return std::string(buf);
# =============================================================================================
# ============================================================================================= 
  - platform: homeassistant
    id: climate_censor_slider_update2
    entity_id: ${entity_id_lbl_btn_climate_2} #  
    attribute: temperature
    on_value:
      - lvgl.slider.update:
          id: slide_climate_2
          value: !lambda 'return (int) x;' 

      - lvgl.label.update:
          id: slide_climate_txt_2  
          text: !lambda |-
            static char buf[10];
            snprintf(buf, sizeof(buf), "%.0f°C", x);
            return std::string(buf);
# =============================================================================================
# ============================================================================================= 
  - platform: homeassistant
    id: climate_censor_slider_update3
    entity_id: ${entity_id_lbl_btn_climate_3} #  
    attribute: temperature
    on_value:
      - lvgl.slider.update:
          id: slide_climate_3
          value: !lambda 'return (int) x;' 

      - lvgl.label.update:
          id: slide_climate_txt_3  
          text: !lambda |-
            static char buf[10];
            snprintf(buf, sizeof(buf), "%.0f°C", x);
            return std::string(buf);
# =============================================================================================
# ============================================================================================= 
  - platform: homeassistant
    id: climate_censor_slider_update4
    entity_id: ${entity_id_lbl_btn_climate_4} #  
    attribute: temperature
    on_value:
      - lvgl.slider.update:
          id: slide_climate_4
          value: !lambda 'return (int) x;' 

      - lvgl.label.update:
          id: slide_climate_txt_4  
          text: !lambda |-
            static char buf[10];
            snprintf(buf, sizeof(buf), "%.0f°C", x);
            return std::string(buf);
# =============================================================================================
# =============================================================================================
# =============================================================================================
  - platform: homeassistant
    id: current_climate_censor_slider_update1   # 집안 현재 온도  
    entity_id: ${entity_id_lbl_btn_climate_1}   
    attribute: current_temperature  # 현재 온도 속성
    on_value:
      then:
        - lvgl.label.update:
            id: current_climate_censor_txt_1    # 
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", x);
              return std::string(buf);
# =============================================================================================
# =============================================================================================
  - platform: homeassistant
    id: current_climate_censor_slider_update2   # 집안 현재 온도  
    entity_id: ${entity_id_lbl_btn_climate_2}   
    attribute: current_temperature  # 현재 온도 속성
    on_value:
      then:
        - lvgl.label.update:
            id: current_climate_censor_txt_2    # 
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", x);
              return std::string(buf);
# =============================================================================================
# =============================================================================================
  - platform: homeassistant
    id: current_climate_censor_slider_update3   # 집안 현재 온도  
    entity_id: ${entity_id_lbl_btn_climate_3}   
    attribute: current_temperature  # 현재 온도 속성
    on_value:
      then:
        - lvgl.label.update:
            id: current_climate_censor_txt_3    # 
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", x);
              return std::string(buf);
# =============================================================================================
# =============================================================================================
  - platform: homeassistant
    id: current_climate_censor_slider_update4   # 집안 현재 온도  
    entity_id: ${entity_id_lbl_btn_climate_4}   
    attribute: current_temperature  # 현재 온도 속성
    on_value:
      then:
        - lvgl.label.update:
            id: current_climate_censor_txt_4    # 
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", x);
              return std::string(buf);
# =============================================================================================


# =============================================================================================
# ========== text_sensor:에 스위치동작상태 센서 추가 영역=======================================
# =============================================================================================
# =============================================================================================
 
text_sensor:

  - platform: version
    name: "ESPHome_Version"
    id: ESPHome_Version_no

  
  - platform: wifi_info
    ip_address:
      name: "WiFi IP Address"
      id: ip_address_no
    mac_address:
      name: "Device MAC Address"
    ssid:
      name: "WiFi SSID"
    bssid:
      name: "WiFi BSSID"
      id: wifi_bssid
 
 
# ax3000 58:86:94:E6:94:F0  58:86:94:E6:94:F3
  - platform: template
    id: wifi_bssid_name
    name: "WiFi BSSID Name"
    update_interval: 10s
    lambda: |-
      static char buf[20];
      std::string mac_str = id(wifi_bssid).state;
      for (auto & c : mac_str) c = toupper(c);

      // 앞 5바이트 (총 14자) 비교, 예: "58:86:94:E6:94"
      std::string mac_prefix = mac_str.substr(0, 14);

      if (mac_prefix == "58:86:94:2A:4C") {
          snprintf(buf, sizeof(buf), "AX8004M");
      } else if (mac_prefix == "58:86:94:88:E3") {
          snprintf(buf, sizeof(buf), "A3-MU");
      } else if (mac_prefix == "58:86:94:E6:94") {
          snprintf(buf, sizeof(buf), "AX3000");
      } else {
          snprintf(buf, sizeof(buf), "Connecting...");
      }
      return std::string(buf);

    on_value:
      then:
        - lambda: |-
            lv_label_set_text(id(wifi_bssid_label), x.c_str());

# text_sensor:
 
  - platform: homeassistant
    id: wn_home_condition
    entity_id: ${entity_id_home_current_condition_wn} 
    on_value:
      then:
        - lambda: |-
            lv_label_set_text(id(home_condition_day_label_big_11), x.c_str());


  - platform: template
    id: previous_media_entity
    name: "Previous Media Entity"

  - platform: template
    id: selected_media_entity
    name: "Selected Media Entity"
## ==================================================================================
  - platform: homeassistant
    entity_id: ${media_entities_1} # media_player.nest_hub_seojae 
    name: nest_hub_seojae_player1
    id: media_player_player_id_11 # label widgets 하단에 연동
    on_value:
      - lvgl.label.update:
          id: media_player_off_label_11  # power버튼구성 label애 연동 nest_hub_seojae speaker1
          text: !lambda |-
            static char buf[50];  // # 버퍼 크기를 늘려서 충분한 공간을 확보합니다.
            snprintf(buf, sizeof(buf), "\U000F057E 서재_%s", id(media_player_player_id_11).state.c_str()); // 거실
            return std::string(buf); // # buf를 std::string으로 변환하여 반환합니다.

      - lvgl.widget.update:
          id: media_player_off_widget_11 # widgets에 연동
          state:
            checked: !lambda return (0 == id(media_player_player_id_11).state.compare(std::string{"playing"}));
            disabled: !lambda return ((0 == id(media_player_player_id_11).state.compare(std::string{"unavailable"})) or (0 == id(media_player_player_id_11).state.compare(std::string{"unknown"})));

# --------------------------------------------------------------------------

# text_sensor:
  - platform: homeassistant
    entity_id: ${media_entities_2} # media_player.nest_audio_geosil 
    name: nest_audio_geosil_player2
    id: media_player_player_id_22 # label widgets 하단에 연동
    on_value:
      - lvgl.label.update:
          id: media_player_off_label_22  # power버튼구성 nest_audio_geosil speaker1
          text: !lambda |-
            static char buf[50];  // # 버퍼 크기를 늘려서 충분한 공간을 확보합니다.
            snprintf(buf, sizeof(buf), "\U000F057E 거실_%s", id(media_player_player_id_22).state.c_str());  // 거실
            return std::string(buf); // # buf를 std::string으로 변환하여 반환합니다.

      - lvgl.widget.update:
          id: media_player_off_widget_22 # widgets에 연동
          state:
            checked: !lambda return (0 == id(media_player_player_id_22).state.compare(std::string{"playing"}));
            disabled: !lambda return ((0 == id(media_player_player_id_22).state.compare(std::string{"unavailable"})) or (0 == id(media_player_player_id_22).state.compare(std::string{"unknown"})));
          

  # --------------------------------------------------------------------------
  
# text_sensor:
  - platform: homeassistant
    entity_id: ${media_entities_3} # media_player.hommini_anbang 
    name: mini_audio_geosil_player3
    id: media_player_player_id_33 # label widgets 하단에 연동
    on_value:
      - lvgl.label.update:
          id: media_player_off_label_33  # power버튼구성 nest_audio_geosil speaker1
          text: !lambda |-
            static char buf[50];  // # 버퍼 크기를 늘려서 충분한 공간을 확보합니다.
            snprintf(buf, sizeof(buf), "\U000F057E 안방_%s", id(media_player_player_id_33).state.c_str());  // 거실
            return std::string(buf); // # buf를 std::string으로 변환하여 반환합니다.

      - lvgl.widget.update:
          id: media_player_off_widget_33 # widgets에 연동
          state:
            checked: !lambda return (0 == id(media_player_player_id_33).state.compare(std::string{"playing"}));
            disabled: !lambda return ((0 == id(media_player_player_id_33).state.compare(std::string{"unavailable"})) or (0 == id(media_player_player_id_33).state.compare(std::string{"unknown"})));
   

# ============================================================ previous_media_entity
  - platform: homeassistant
    entity_id: ${media_entities_1} # media_player.nest_hub_seojae 
    name:  media.player sound playing sound
    id: media_player_png_playing_image_1

    on_value:
      - if:
          condition:
            - lambda: 'return id(media_player_png_playing_image_1).state == "on";'
          then:
            - lvgl.image.update:
                id: media_player_png_playing_image_widget_1
                src: icons8_nosound_png

      - if:
          condition:
            - lambda: 'return id(media_player_png_playing_image_1).state == "playing";'
          then:
            - lvgl.image.update:
                id: media_player_png_playing_image_widget_1
                src: icons8_sound_png

      - if:
          condition:
            - lambda: 'return id(media_player_png_playing_image_1).state == "paused";'
          then:
            - lvgl.image.update:
                id: media_player_png_playing_image_widget_1
                src: icons8_nosound_png

      - if:
          condition:
            - lambda: 'return id(media_player_png_playing_image_1).state == "idle";'
          then:
            - lvgl.image.update:
                id: media_player_png_playing_image_widget_1
                src: icons8_idle_png

      - if:
          condition:
            - lambda: 'return id(media_player_png_playing_image_1).state == "off";'
          then:
            - lvgl.image.update:
                id: media_player_png_playing_image_widget_1
                src: icons8_nosound_png                       
# text_sensor:        ------------------------------------------------------------------   entity_id_lbl_btn_switch_1
  - platform: homeassistant
    id: light_bookroom1
    entity_id: ${entity_id_light_bookroom_sw2} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_bookroom1
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");

        - lvgl.widget.update:
            id: btn_switch_1
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");

        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_bookroom1), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_bookroom1), LV_OPA_COVER, LV_PART_MAIN);

        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_switch_1), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_switch_1), LV_OPA_COVER, LV_PART_MAIN);


# text_sensor:   =============================================================================================
  - platform: homeassistant
    id: light_1
    entity_id: ${entity_id_lbl_btn_light_1} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_1
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_1), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_1), LV_OPA_COVER, LV_PART_MAIN);
# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_2
    entity_id: ${entity_id_lbl_btn_light_2} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_2
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_2), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_2), LV_OPA_COVER, LV_PART_MAIN);

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_3
    entity_id: ${entity_id_lbl_btn_light_3} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_3
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_3), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_3), LV_OPA_COVER, LV_PART_MAIN);           


# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_4
    entity_id: ${entity_id_lbl_btn_light_4} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_4
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_4), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_4), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888  light
  - platform: homeassistant
    id: light_5
    entity_id: ${entity_id_lbl_btn_light_5} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_5
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_5), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_5), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888  light
  - platform: homeassistant
    id: light_6
    entity_id: ${entity_id_lbl_btn_light_6} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_6
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_6), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_6), LV_OPA_COVER, LV_PART_MAIN);           


# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light 
  - platform: homeassistant
    id: light_7
    entity_id: ${entity_id_lbl_btn_light_7} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_7
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_7), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_7), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_8
    entity_id: ${entity_id_lbl_btn_light_8} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_8
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_8), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_8), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_9
    entity_id: ${entity_id_lbl_btn_light_9} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_9
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_9), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_9), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_10
    entity_id: ${entity_id_lbl_btn_light_10} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_10
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_10), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_10), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_11
    entity_id: ${entity_id_lbl_btn_light_11} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_11
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_11), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_11), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_12
    entity_id: ${entity_id_lbl_btn_light_12} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_12
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_12), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_12), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_13
    entity_id: ${entity_id_lbl_btn_light_13} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_13
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_13), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_13), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light
  - platform: homeassistant
    id: light_14
    entity_id: ${entity_id_lbl_btn_light_14} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_14
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_14), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_14), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888  light
  - platform: homeassistant
    id: light_15
    entity_id: ${entity_id_lbl_btn_light_15} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_15
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_15), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_15), LV_OPA_COVER, LV_PART_MAIN);           

# text_sensor:  8888888888888888888888888888888888888888888888888888888888888888888888888888888888 light

  - platform: homeassistant
    id: light_16
    entity_id: ${entity_id_lbl_btn_light_16} #  
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_light_16
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_light_16), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_light_16), LV_OPA_COVER, LV_PART_MAIN);     


  # entity_id_lbl_btn_switch_name_2: "TV전원"
  # entity_id_lbl_btn_switch_2: "switch.tv_socket_1"

  - platform: homeassistant
    id: switch_2
    entity_id: ${entity_id_lbl_btn_switch_2} #  
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_switch_2
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_switch_2), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_switch_2), LV_OPA_COVER, LV_PART_MAIN);       

###################### 보일러 heat 로 변경 ====================================
### --------------------------------------------------------------------------- 1111111111111 entity_id_lbl_btn_climate_1

  - platform: homeassistant
    id: climate_1
    entity_id: ${entity_id_lbl_btn_climate_1} # 서재불
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_climate_1
            state:
              checked: !lambda return (x == "heat");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "heat") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_climate_1), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_climate_1), LV_OPA_COVER, LV_PART_MAIN);   
### ===================================================================================22222222222 climate

  - platform: homeassistant
    id: climate_2
    entity_id: ${entity_id_lbl_btn_climate_2} # 서재불
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_climate_2
            state:
              checked: !lambda return (x == "heat");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "heat") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_climate_2), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_climate_2), LV_OPA_COVER, LV_PART_MAIN);   
### ===================================================================================3333333333333333 climate

  - platform: homeassistant
    id: climate_3
    entity_id: ${entity_id_lbl_btn_climate_3} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_climate_3
            state:
              checked: !lambda return (x == "heat");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "heat") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_climate_3), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_climate_3), LV_OPA_COVER, LV_PART_MAIN);   
### ===================================================================================444444444444444 climate

  - platform: homeassistant
    id: climate_4
    entity_id: ${entity_id_lbl_btn_climate_4} # 
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_climate_4
            state:
              checked: !lambda return (x == "heat");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "heat") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_climate_4), color, LV_PART_MAIN);   
            lv_obj_set_style_text_opa(id(lbl_btn_climate_4), LV_OPA_COVER, LV_PART_MAIN);   
### ===================================================================================
# text_sensor: 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999
  - platform: homeassistant
    id: entity_id_computer_switch_id
    entity_id: ${entity_id_computer_switch} # switch.seojae_bul_left_2
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_computer_on # computer_on_txt
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0xFF, 0xE0, 0x00); // ON → 노랑 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0x00, 0xFF, 0x00); // OFF → 초록
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_computer_on), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_computer_on), LV_OPA_COVER, LV_PART_MAIN);


 # text_sensor:
  - platform: homeassistant
    id: entity_id_computer_switch_off_id
    entity_id: ${entity_id_computer_switch} # switch.seojae_bul_left_2
    on_value:
      then:
        - lvgl.widget.update:
            id: btn_computer_off # computer_on_txt
            state:
              checked: !lambda return (x == "on");
              disabled: !lambda return (x == "unavailable" || x == "unknown");
              # disabled: !lambda return (x == "on");
              # checked: !lambda return (x == "unavailable" || x == "unknown");
 
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0x00, 0xFF, 0x00); // HAOS 연결됨 → 초록 (Green)
            } else if (x == "off") {
                color = lv_color_make(0xFF, 0xFF, 0x00); // OFF → 노랑
            } else {
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑 (Blue) 
            }
            lv_obj_set_style_text_color(id(lbl_btn_computer_off), color, LV_PART_MAIN);
        - lambda: |-
            lv_color_t color;
            if (x == "on") {
                color = lv_color_make(0x00, 0xE0, 0x00); // ON → 초록 (RGB565 대응)
            } else if (x == "off") {
                color = lv_color_make(0xFF, 0xFF, 0x00); // OFF → 노랑
            } else {  
                color = lv_color_make(0x00, 0x00, 0xFF); // HAOS_FAIL → 파랑
            }
            lv_obj_set_style_text_color(id(lbl_btn_computer_off), color, LV_PART_MAIN);
            lv_obj_set_style_text_opa(id(lbl_btn_computer_off), LV_OPA_COVER, LV_PART_MAIN);            
# ============================================================================================= btn_computer_off_txt


##### =======================================================================================

#---------------------------------------------------------00000 주간날씨  반복작업 영역
# text_sensor: weather_daily_forecast_wn_home_entity_id
  - platform: homeassistant
    id: weather_daily_forecast_home_day_0
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: day_0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "Day 0: %s", x.c_str());
            std::string day = x;
            std::string day_kr;
            if (day == "Sunday") day_kr = "일";
            else if (day == "Monday") day_kr = "월";
            else if (day == "Tuesday") day_kr = "화";
            else if (day == "Wednesday") day_kr = "수";
            else if (day == "Thursday") day_kr = "목";
            else if (day == "Friday") day_kr = "금";
            else if (day == "Saturday") day_kr = "토";
            else day_kr = "N/A";
            lv_label_set_text(id(home_day_label_condition_0), day_kr.c_str());
            ESP_LOGD("debug", "Day 0 (KR): %s", day_kr.c_str());
# ----------------------------------------------------------
  - platform: homeassistant
    id: weather_daily_forecast_home_condition_0
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: condition_0
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "condition_0: %s", x.c_str());
            std::string condition = x;
            std::string scr;
            std::string condition_kr;

            // 이미지 및 한글 매핑 (한 줄로 정리)
            if (condition == "sunny") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "clear") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "clear-night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "nightpartlycloud") { scr = "nightpartlycloud"; condition_kr = "밤 구름 조금"; }
            else if (condition == "partlycloudy") { scr = "partlycloud"; condition_kr = "구름 조금"; }
            else if (condition == "cloudy") { scr = "cloudy"; condition_kr = "흐림"; }
            else if (condition == "rainy") { scr = "rainy"; condition_kr = "비"; }
            else if (condition == "pouring") { scr = "pouring"; condition_kr = "폭우"; }
            else if (condition == "hail") { scr = "hail"; condition_kr = "우박"; }
            else if (condition == "snowy") { scr = "snowy"; condition_kr = "눈"; }
            else if (condition == "windy") { scr = "windy"; condition_kr = "바람"; }
            else if (condition == "lightning") { scr = "lightning"; condition_kr = "번개"; }
            else if (condition == "thunder") { scr = "thunder"; condition_kr = "천둥"; }
            else if (condition == "lightning-rainy") { scr = "lightning"; condition_kr = "번개와 비"; }
            else if (condition == "snowy-rainy") { scr = "rainy"; condition_kr = "눈비"; }
            else { scr = "partlycloud"; condition_kr = "N/A"; }
            ESP_LOGD("debug", "condition_0 (scr): %s", scr.c_str());
            ESP_LOGD("debug", "condition_0 (KR): %s", condition_kr.c_str());

            // 한글 라벨 업데이트
            lv_label_set_text(id(home_day_weather_condition_0), condition_kr.c_str());
            // 이미지 업데이트 >> 전체 개별업데이트
            if (scr == "sunny") lv_img_set_src(id(home_day_image_condition_0), id(sunny));
            else if (scr == "clearnight") lv_img_set_src(id(home_day_image_condition_0), id(clearnight));
            else if (scr == "nightpartlycloud") lv_img_set_src(id(home_day_image_condition_0), id(nightpartlycloud));
            else if (scr == "partlycloud") lv_img_set_src(id(home_day_image_condition_0), id(partlycloud));
            else if (scr == "cloudy") lv_img_set_src(id(home_day_image_condition_0), id(cloudy));
            else if (scr == "rainy") lv_img_set_src(id(home_day_image_condition_0), id(rainy));
            else if (scr == "pouring") lv_img_set_src(id(home_day_image_condition_0), id(pouring));
            else if (scr == "hail") lv_img_set_src(id(home_day_image_condition_0), id(hail));
            else if (scr == "snowy") lv_img_set_src(id(home_day_image_condition_0), id(snowy));
            else if (scr == "windy") lv_img_set_src(id(home_day_image_condition_0), id(windy));
            else if (scr == "lightning") lv_img_set_src(id(home_day_image_condition_0), id(lightning));
            else lv_img_set_src(id(home_day_image_condition_0), id(partlycloud));  // 기본값

 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_hi_0 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_hi_0 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Hi 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_hi_label_condition_0 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf);
 
 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_lo_0 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_lo_0 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Lo 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_lo_label_condition_0 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf); 
    
                   
#---------------------------------------------------------11111    # text_sensor:
  - platform: homeassistant
    id: weather_daily_forecast_home_day_1
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: day_1
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "Day 0: %s", x.c_str());
            std::string day = x;
            std::string day_kr;
            if (day == "Sunday") day_kr = "일";
            else if (day == "Monday") day_kr = "월";
            else if (day == "Tuesday") day_kr = "화";
            else if (day == "Wednesday") day_kr = "수";
            else if (day == "Thursday") day_kr = "목";
            else if (day == "Friday") day_kr = "금";
            else if (day == "Saturday") day_kr = "토";
            else day_kr = "N/A";
            lv_label_set_text(id(home_day_label_condition_1), day_kr.c_str());
            ESP_LOGD("debug", "Day 0 (KR): %s", day_kr.c_str());
# ----------------------------------------------------------
  - platform: homeassistant
    id: weather_daily_forecast_home_condition_1
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: condition_1
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "condition_0: %s", x.c_str());
            std::string condition = x;
            std::string scr;
            std::string condition_kr;

            // 이미지 및 한글 매핑 (한 줄로 정리)
            if (condition == "sunny") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "clear") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "clear-night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "nightpartlycloud") { scr = "nightpartlycloud"; condition_kr = "밤 구름 조금"; }
            else if (condition == "partlycloudy") { scr = "partlycloud"; condition_kr = "구름 조금"; }
            else if (condition == "cloudy") { scr = "cloudy"; condition_kr = "흐림"; }
            else if (condition == "rainy") { scr = "rainy"; condition_kr = "비"; }
            else if (condition == "pouring") { scr = "pouring"; condition_kr = "폭우"; }
            else if (condition == "hail") { scr = "hail"; condition_kr = "우박"; }
            else if (condition == "snowy") { scr = "snowy"; condition_kr = "눈"; }
            else if (condition == "windy") { scr = "windy"; condition_kr = "바람"; }
            else if (condition == "lightning") { scr = "lightning"; condition_kr = "번개"; }
            else if (condition == "thunder") { scr = "lightning"; condition_kr = "천둥"; }
            else if (condition == "lightning-rainy") { scr = "lightning"; condition_kr = "번개와 비"; }
            else if (condition == "snowy-rainy") { scr = "rainy"; condition_kr = "눈비"; }
            else { scr = "partlycloud"; condition_kr = "N/A"; }
            ESP_LOGD("debug", "condition_1 (scr): %s", scr.c_str());
            ESP_LOGD("debug", "condition_1 (KR): %s", condition_kr.c_str());

            // 한글 라벨 업데이트
            lv_label_set_text(id(home_day_weather_condition_1), condition_kr.c_str());
            // 이미지 업데이트 >> 전체 개별업데이트
            if (scr == "sunny") lv_img_set_src(id(home_day_image_condition_1), id(sunny));
            else if (scr == "clearnight") lv_img_set_src(id(home_day_image_condition_1), id(clearnight));
            else if (scr == "nightpartlycloud") lv_img_set_src(id(home_day_image_condition_1), id(nightpartlycloud));
            else if (scr == "partlycloud") lv_img_set_src(id(home_day_image_condition_1), id(partlycloud));
            else if (scr == "cloudy") lv_img_set_src(id(home_day_image_condition_1), id(cloudy));
            else if (scr == "rainy") lv_img_set_src(id(home_day_image_condition_1), id(rainy));
            else if (scr == "pouring") lv_img_set_src(id(home_day_image_condition_1), id(pouring));
            else if (scr == "hail") lv_img_set_src(id(home_day_image_condition_1), id(hail));
            else if (scr == "snowy") lv_img_set_src(id(home_day_image_condition_1), id(snowy));
            else if (scr == "windy") lv_img_set_src(id(home_day_image_condition_1), id(windy));
            else if (scr == "lightning") lv_img_set_src(id(home_day_image_condition_1), id(lightning));
            else lv_img_set_src(id(home_day_image_condition_1), id(partlycloud));  // 기본값
 
  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_hi_1 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_hi_1 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Hi 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_hi_label_condition_1 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf);
 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_lo_1 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_lo_1 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Lo 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_lo_label_condition_1 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf); 
 
#---------------------------------------------------------2222
#---------------------------------------------------------2    # text_sensor:
  - platform: homeassistant
    id: weather_daily_forecast_home_day_2
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: day_2
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "Day 0: %s", x.c_str());
            std::string day = x;
            std::string day_kr;
            if (day == "Sunday") day_kr = "일";
            else if (day == "Monday") day_kr = "월";
            else if (day == "Tuesday") day_kr = "화";
            else if (day == "Wednesday") day_kr = "수";
            else if (day == "Thursday") day_kr = "목";
            else if (day == "Friday") day_kr = "금";
            else if (day == "Saturday") day_kr = "토";
            else day_kr = "N/A";
            lv_label_set_text(id(home_day_label_condition_2), day_kr.c_str());
            ESP_LOGD("debug", "Day 0 (KR): %s", day_kr.c_str());
# ----------------------------------------------------------
  - platform: homeassistant
    id: weather_daily_forecast_home_condition_2
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: condition_2
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "condition_0: %s", x.c_str());
            std::string condition = x;
            std::string scr;
            std::string condition_kr;

            // 이미지 및 한글 매핑 (한 줄로 정리)
            if (condition == "sunny") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "clear") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "clear-night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "nightpartlycloud") { scr = "nightpartlycloud"; condition_kr = "밤 구름 조금"; }
            else if (condition == "partlycloudy") { scr = "partlycloud"; condition_kr = "구름 조금"; }
            else if (condition == "cloudy") { scr = "cloudy"; condition_kr = "흐림"; }
            else if (condition == "rainy") { scr = "rainy"; condition_kr = "비"; }
            else if (condition == "pouring") { scr = "pouring"; condition_kr = "폭우"; }
            else if (condition == "hail") { scr = "hail"; condition_kr = "우박"; }
            else if (condition == "snowy") { scr = "snowy"; condition_kr = "눈"; }
            else if (condition == "windy") { scr = "windy"; condition_kr = "바람"; }
            else if (condition == "lightning") { scr = "lightning"; condition_kr = "번개"; }
            else if (condition == "thunder") { scr = "lightning"; condition_kr = "천둥"; }
            else if (condition == "lightning-rainy") { scr = "lightning"; condition_kr = "번개와 비"; }
            else if (condition == "snowy-rainy") { scr = "rainy"; condition_kr = "눈비"; }
            else { scr = "partlycloud"; condition_kr = "N/A"; }
            ESP_LOGD("debug", "condition_2 (scr): %s", scr.c_str());
            ESP_LOGD("debug", "condition_2 (KR): %s", condition_kr.c_str());

            // 한글 라벨 업데이트
            lv_label_set_text(id(home_day_weather_condition_2), condition_kr.c_str());
              
            // 이미지 업데이트 >> 전체 개별업데이트
            if (scr == "sunny") lv_img_set_src(id(home_day_image_condition_2), id(sunny));
            else if (scr == "clearnight") lv_img_set_src(id(home_day_image_condition_2), id(clearnight));
            else if (scr == "nightpartlycloud") lv_img_set_src(id(home_day_image_condition_2), id(nightpartlycloud));
            else if (scr == "partlycloud") lv_img_set_src(id(home_day_image_condition_2), id(partlycloud));
            else if (scr == "cloudy") lv_img_set_src(id(home_day_image_condition_2), id(cloudy));
            else if (scr == "rainy") lv_img_set_src(id(home_day_image_condition_2), id(rainy));
            else if (scr == "pouring") lv_img_set_src(id(home_day_image_condition_2), id(pouring));
            else if (scr == "hail") lv_img_set_src(id(home_day_image_condition_2), id(hail));
            else if (scr == "snowy") lv_img_set_src(id(home_day_image_condition_2), id(snowy));
            else if (scr == "windy") lv_img_set_src(id(home_day_image_condition_2), id(windy));
            else if (scr == "lightning") lv_img_set_src(id(home_day_image_condition_2), id(lightning));
            else lv_img_set_src(id(home_day_image_condition_2), id(partlycloud));  // 기본값
 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_hi_2 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_hi_2 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Hi 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_hi_label_condition_2 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf);
 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_lo_2 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_lo_2 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Lo 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_lo_label_condition_2 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf); 
                 
#---------------------------------------------------------3333
#---------------------------------------------------------3333    # text_sensor:
  - platform: homeassistant
    id: weather_daily_forecast_home_day_3
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: day_3
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "Day 0: %s", x.c_str());
            std::string day = x;
            std::string day_kr;
            if (day == "Sunday") day_kr = "일";
            else if (day == "Monday") day_kr = "월";
            else if (day == "Tuesday") day_kr = "화";
            else if (day == "Wednesday") day_kr = "수";
            else if (day == "Thursday") day_kr = "목";
            else if (day == "Friday") day_kr = "금";
            else if (day == "Saturday") day_kr = "토";
            else day_kr = "N/A";
            lv_label_set_text(id(home_day_label_condition_3), day_kr.c_str());
            ESP_LOGD("debug", "Day 0 (KR): %s", day_kr.c_str());
# ----------------------------------------------------------
  - platform: homeassistant
    id: weather_daily_forecast_home_condition_3
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: condition_3
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("debug", "condition_0: %s", x.c_str());
            std::string condition = x;
            std::string scr;
            std::string condition_kr;

            // 이미지 및 한글 매핑 (한 줄로 정리)
            if (condition == "sunny") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "clear") { scr = "sunny"; condition_kr = "맑음"; }
            else if (condition == "night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "clear-night") { scr = "clearnight"; condition_kr = "맑은 밤"; }
            else if (condition == "nightpartlycloud") { scr = "nightpartlycloud"; condition_kr = "밤 구름 조금"; }
            else if (condition == "partlycloudy") { scr = "partlycloud"; condition_kr = "구름 조금"; }
            else if (condition == "cloudy") { scr = "cloudy"; condition_kr = "흐림"; }
            else if (condition == "rainy") { scr = "rainy"; condition_kr = "비"; }
            else if (condition == "pouring") { scr = "pouring"; condition_kr = "폭우"; }
            else if (condition == "hail") { scr = "hail"; condition_kr = "우박"; }
            else if (condition == "snowy") { scr = "snowy"; condition_kr = "눈"; }
            else if (condition == "windy") { scr = "windy"; condition_kr = "바람"; }
            else if (condition == "lightning") { scr = "lightning"; condition_kr = "번개"; }
            else if (condition == "thunder") { scr = "lightning"; condition_kr = "천둥"; }
            else if (condition == "lightning-rainy") { scr = "lightning"; condition_kr = "번개와 비"; }
            else if (condition == "snowy-rainy") { scr = "rainy"; condition_kr = "눈비"; }
            else { scr = "partlycloud"; condition_kr = "N/A"; }
            ESP_LOGD("debug", "condition_3 (scr): %s", scr.c_str());
            ESP_LOGD("debug", "condition_3 (KR): %s", condition_kr.c_str());

            // 한글 라벨 업데이트
            lv_label_set_text(id(home_day_weather_condition_3), condition_kr.c_str());
              
            // 이미지 업데이트 >> 전체 개별업데이트
            if (scr == "sunny") lv_img_set_src(id(home_day_image_condition_3), id(sunny));
            else if (scr == "clearnight") lv_img_set_src(id(home_day_image_condition_3), id(clearnight));
            else if (scr == "nightpartlycloud") lv_img_set_src(id(home_day_image_condition_3), id(nightpartlycloud));
            else if (scr == "partlycloud") lv_img_set_src(id(home_day_image_condition_3), id(partlycloud));
            else if (scr == "cloudy") lv_img_set_src(id(home_day_image_condition_3), id(cloudy));
            else if (scr == "rainy") lv_img_set_src(id(home_day_image_condition_3), id(rainy));
            else if (scr == "pouring") lv_img_set_src(id(home_day_image_condition_3), id(pouring));
            else if (scr == "hail") lv_img_set_src(id(home_day_image_condition_3), id(hail));
            else if (scr == "snowy") lv_img_set_src(id(home_day_image_condition_3), id(snowy));
            else if (scr == "windy") lv_img_set_src(id(home_day_image_condition_3), id(windy));
            else if (scr == "lightning") lv_img_set_src(id(home_day_image_condition_3), id(lightning));
            else lv_img_set_src(id(home_day_image_condition_3), id(partlycloud));  // 기본값

 
  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_hi_3 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_hi_3 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Hi 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_hi_label_condition_3 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf);
 

  - platform: homeassistant
    id: weather_daily_forecast_home_temperature_lo_3 ###
    entity_id: ${weather_daily_forecast_wn_home_entity_id}
    attribute: temperature_lo_3 ###
    on_value:
      then: ###
        - lambda: |-
            ESP_LOGD("debug", "Temperature Lo 0: %s", x.c_str());
        - lvgl.label.update:
            id: home_temperature_day_lo_label_condition_3 ###
            text: !lambda |-
              static char buf[10];
              snprintf(buf, sizeof(buf), "%.0f°C", atof(x.c_str()));
              return std::string(buf); 
 
 #----------------------------------------------- 2025_0321_1113_20  주간날씨끝
    
 #----------------------------------------------------------------------------------------------- 2025_0321_1113_20
# text_sensor:
# text_sensor:
  - platform: template
    id: ampm_text
    name: "AMPM Text"
    lambda: |-
      auto now = id(home_time).now();
      return now.hour < 12 ? std::string("오전") : std::string("오후");
    update_interval: 60s
    on_value:
      - lambda: |-
          lv_label_set_text(id(date_clock_ampm), x.c_str());

# -------------------------------------------------------
  
#웨더뉴스 날씨
  - platform: homeassistant
    entity_id: ${weather_wn_home} #weather.wn_home ## weather.yeongdeogdong # weather.naver_weather_1
    name: naver weather 
    id: naver_weather_1
    on_value:
      - if:
          condition:
            or:
              - lambda: 'return id(naver_weather_1).state == "sunny";'
              - lambda: 'return id(naver_weather_1).state == "clear";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: sunny
 
      - if:
          condition:
            or:
              - lambda: 'return id(naver_weather_1).state == "clear-night";'
              - lambda: 'return id(naver_weather_1).state == "night";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: clearnight
           
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "partlycloudy";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: partlycloud
       
      - if:
          condition:
            and:              
              - lambda: 'return id(naver_weather_1).state == "partlycloudy";'
              - sun.is_below_horizon:
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: nightpartlycloud
        
      - if:
          condition:            
            - lambda: 'return id(naver_weather_1).state == "cloudy";'
            - sun.is_below_horizon:
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: cloudy
           
      - if:
          condition:            
            and:              
              - lambda: 'return id(naver_weather_1).state == "cloudy";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: cloudy
        
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "rainy";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: rainy
        
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "pouring";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: pouring 
            
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "hail";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: hail   
           
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "snowy";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: snowy
         
      - if:
          condition:
            - lambda: 'return id(naver_weather_1).state == "windy";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: windy
           
      - if:
          condition:
            or:
              - lambda: 'return id(naver_weather_1).state == "lightning";'
              - lambda: 'return id(naver_weather_1).state == "lightning-rainy";'
              - lambda: 'return id(naver_weather_1).state == "thender";'
          then:
            - lvgl.image.update:
                id: home_weather_icon
                src: lightning
           
# -----------------------------------------------
 # 888888888888888888888888888888888888888  
 
  - platform: copy
    source_id: ESPHome_Version_no
    name: install_esphome_version_time
    id: install_esphome_version
    on_value:
      - lvgl.label.update:
          id: install_esphome_version_txt
          text: !lambda |-
            static char buf[70];  // # 버퍼 크기를 늘려서 충분한 공간을 확보합니다.          
            snprintf(buf, sizeof(buf), "Ver__%s", id(install_esphome_version).state.c_str());  
            return std::string(buf); // # buf를 std::string으로 변환하여 반환합니다.  

# =================================================================================# text_sensor: ============ end

script:
  - id: light_up
    then:
      - if:
          condition:
              - switch.is_off: backlight_switch_id
              - light.is_off: backlight_light_id
          then:
            - light.turn_on: 
                id: backlight_light_id
                brightness: !lambda return id(backlight_brightness_number).state / 100;  


  - id: time_update
    then:
      - lambda: |-
          auto now = id(home_time).now();
          int hour_12 = now.hour % 12;
          if (hour_12 == 0) hour_12 = 12;

          static char time_buf[50];
          snprintf(time_buf, sizeof(time_buf), "#FFFFFF %02d:%02d#", 
                   hour_12, now.minute);
          lv_label_set_text(id(time_clock_big), time_buf);


      - lvgl.label.update:
          id: title_time_top
          text: !lambda |-
            static char time_buf[17];
            auto now = id(home_time).now();
            bool is_pm = now.hour >= 12;
            int hour_12 = now.hour % 12;
            if (hour_12 == 0) {
                hour_12 = 12; // 12 AM/PM should be displayed as 12, not 0
            }
            snprintf(time_buf, sizeof(time_buf), "%s%2d:%02d,%02d", is_pm ? "오후" : "오전", hour_12, now.minute, now.second);
            return time_buf;

      - lvgl.label.update:
          id: clock_time_sec
          text: !lambda |-
            static char time_buf[100];
            auto now = id(home_time).now();
            snprintf(time_buf, sizeof(time_buf), ".%02d", now.second);
            return time_buf;


  - id: date_update
    then:
      - lambda: |-
          static char date_buf[60];
          auto now = id(home_time).now();
          const char* weekdays[] = {
              "#00FF00 일#", "#00FF00 월#", "#00FF00 화#", 
              "#00FF00 수#", "#00FF00 목#", "#00FF00 금#", "#00FF00 토#"
          };
          snprintf(date_buf, sizeof(date_buf), "%04d-%02d-%02d (%s)", 
              now.year, now.month, now.day_of_month, weekdays[now.day_of_week - 1]);
          lv_label_set_text(id(date_clock_big), date_buf);

      - lvgl.label.update:
          id: title_date
          text: !lambda |-
            static char date_buf[40];
            auto now = id(home_time).now();
            const char* weekdays[] = {"일", "월", "화", "수", "목", "금", "토"}; //font_20
            snprintf(date_buf, sizeof(date_buf), "%04d-%02d-%02d (%s)", now.year, now.month, now.day_of_month, weekdays[now.day_of_week - 1]);
            return date_buf;


lvgl:
  draw_rounding: 8 # necessary for the axs15231 display controller
  touchscreens: my_touch
  bg_color: 0
  border_width: 0
  outline_width: 0

  theme:
    bar:
      radius: 0
      indicator:
        radius: 0
        arc_color: red

  style_definitions: # LVGL 스타일 정의 섹션
    - id: style_icon  # 아이콘 스타일 정의
      text_color: 0xD5D5D5  # 텍스트 색상을 밝은 회색으로 설정
      bg_opa: TRANSP  # 배경 투명 설정
      radius: 5  # 모서리 둥글기 정도 (5px)
      border_color: 0xE9E9E9  # 테두리 색상을 연한 회색으로 설정
      border_width: 0  # 테두리 두께 0 (테두리 없음)
      #border_opa:  # (생략됨) 테두리 투명도 설정 가능
      pad_all: 0  # 내부 여백 없음
      shadow_width: 0  # 그림자 없음
      shadow_opa: TRANSP  # 그림자 투명 설정

    - id: style_button  # 버튼 스타일 정의
      radius: 20  # 버튼 모서리 둥글기 설정 (20px)
      text_font: font_25  # 버튼 내 텍스트 폰트 크기 설정 (25px 폰트 사용)
      text_align: CENTER  # 버튼 내 텍스트 가운데 정렬
      bg_color: 0x2F8CD8  # 버튼 기본 배경색 (푸른색)
      bg_grad_color: 0x0460BD  # 버튼 그라디언트 색상 (더 짙은 파란색)
      bg_grad_dir: VER  # 버튼 배경 그라디언트 방향을 수직으로 설정
      border_width: 5  # 테두리 두께 5px
      border_color: 0x1e84eb  # 테두리 색상을 밝은 파란색으로 설정
      border_opa: 50%  # 테두리 투명도를 50%로 설정
      outline_width: 1  # 아웃라인 두께 1px


    # 외곽선용 큰 글자 스타일 (검정색)
    - id: style_text_outline
      text_color: 0x000000        # 외곽선 색상 (검정)
      bg_opa: TRANSP              # 배경을 투명하게 설정

    # 내부 실제 텍스트 스타일 (흰색)
    - id: style_inner_text
      text_color: 0xFFFFFF        # 텍스트 색상 (흰색)
      bg_opa: TRANSP              # 배경 투명하게 설정

    # 텍스트를 감싸는 박스 스타일
    - id: style_box
      bg_color: 0x222222          # 배경 색상
      bg_opa: COVER               # 배경 투명도 설정 (COVER는 완전히 덮음)
      radius: 20                  # 모서리 반경
      border_width: 2             # 박스 외곽선 두께
      border_color: 0x000000      # 박스 외곽선 색상 (검정)
      pad_all: 10                 # 박스 내부 여백

    - id: style_weather_bottom
      text_color: 0xD5D5D5
      bg_color: 0
      bg_opa: TRANSP
      border_color: 0xE9E9E9      
      border_width: 0
      radius: 0
      pad_all: 0

    - id: style_card
      text_color: 0xD5D5D5
      bg_color: 0x222222
      bg_opa: COVER
      radius: 20
      outline_width: 0
      border_width: 0
      #border_opa:
      pad_all: 0
    
    - id: style_header_footer_top
      # text_font: font_15
      text_color: 0xD5D5D5
      bg_color: 0
      bg_opa: TRANSP
      border_opa: TRANSP
      radius: 0
      pad_all: 0
      shadow_opa: TRANSP
      width: 100%

    - id: style_1card  # 카드 위젯의 고유 ID
      text_color: 0xD5D5D5  # 텍스트 색상: 연한 회색 (hex 코드로 표현)
      bg_color: 0x222222  # 배경 색상: 어두운 회색/검정 (hex 코드로 표현)
      bg_opa: 30% #COVER  # 배경의 불투명도 설정 (COVER는 완전 불투명)
      radius: 10  # 모서리 반경: 카드 모서리가 둥글게 처리되는 정도 (픽셀 단위)
      outline_width: 0  # 외곽선 너비: 외곽선의 두께 (픽셀 단위)
      border_width: 0  # 테두리 너비: 테두리의 두께 (픽셀 단위)
      border_opa: 0%  # 테두리의 불투명도 설정 (주석 처리됨)
      pad_all: 0  # 전체 여백 설정: 모든 방향에서의 여백 (픽셀 단위)

    - id: style_2card  # 카드 위젯의 고유 ID
      # text_color: 0xD5D5D5  # 텍스트 색상: 연한 회색 (hex 코드로 표현)
      bg_color: 0x222222  # 배경 색상: 어두운 회색/검정 (hex 코드로 표현)
      bg_opa: 88% #COVER  # 배경의 불투명도 설정 (COVER는 완전 불투명)
      radius: 10  # 모서리 반경: 카드 모서리가 둥글게 처리되는 정도 (픽셀 단위)
      outline_width: 0  # 외곽선 너비: 외곽선의 두께 (픽셀 단위)
      border_width: 0  # 테두리 너비: 테두리의 두께 (픽셀 단위)
      border_opa: 0%  # 테두리의 불투명도 설정 (주석 처리됨)
      pad_all: 0  # 전체 여백 설정: 모든 방향에서의 여백 (픽셀 단위)
      # 설명

    - id: style_tab_theme # tab_theme # style_tab_theme
      border_width: 0
      border_color: 0x0077b3
      border_opa: TRANSP
      bg_color: 0x2F8CD8
      bg_grad_color: 0x005782                  
      bg_grad_dir: VER
      pad_all: 0                  
      width: 100%
      height: 50
      text_font: font_26
      text_align: CENTER

    - id: style_weather_top
      text_color: 0xD5D5D5
      bg_color: 0
      bg_opa: TRANSP
      border_side: 
        - top
        - bottom
      border_color: 0xE9E9E9
      border_width: 3
      #border_opa:
      radius: 0
      pad_all: 0
      shadow_width: 0
      shadow_opa: TRANSP

    - id: style_time
      text_color: 0xD5D5D5
      bg_opa: TRANSP
      radius: 5
      border_color: 0xE9E9E9
      border_width: 0
      #border_opa:
      pad_all: 0
      shadow_width: 0
      shadow_opa: TRANSP        
#### ====================================================        
# =================  모든 위젯 설정 =========================        
# # 상단 타이틀 top-icon 상단메뉴
# ======================================
  top_layer:
    id: top_layer_id 
    widgets: 
# ========================================================
# 상단메뉴 타이틀 홈버튼 위치구성 2025_0303_1439_38  top_icon 
# 상단시계 상단날짜 첫줄시계 
# ----------------------------------------------------------
      - obj:
          x: 0
          y: -3
          width: 100% # x: 0 과 100% 로 좌우 이동 없음
          height: 50
          align: TOP_LEFT
          scrollbar_mode: "OFF"
          text_color: 0xD5D5D5
          text_font: font_20  #
          bg_color: 0
          bg_opa: TRANSP
          border_opa: TRANSP
          radius: 0
          pad_all: 0
          shadow_opa: TRANSP          
          id: top_layer1
          widgets:
# ------------------------------------------------------------         

            - label:                
                text: "오전00:00.00"
                id: title_time_top
                align: TOP_LEFT
 
                text_color: 0xFFFFFF
                x: 20 #220
                text_align: LEFT

            - label:
                text: "2000-00-00(토)"
                text_color: 0x00FF00   # 색상 코드 수정 (6자리로 변경)
                id: title_date
                align: TOP_LEFT
                x: 140
                text_align: LEFT
       
            - label:
                id: wifi_bssid_label  
                align: TOP_MID
                x: 120
                y: 0
                text: "wifi_con" # AM8004M" # 192.168.0.46  wifi_connection_mac
                text_align: LEFT
                text_color: 0xFFFF00 
                                      
# # ================================================ TOP_RIGHT
     
            - button:
                x: -30
                id: wifi_connection_signal_button
                align: TOP_RIGHT
                styles: style_header_footer_top
                height: 49
                width: 59 # 78
                widgets:
                  - label:
                      id: wifi_connection_signal
                      align: TOP_RIGHT
                      text: "\U000F16C5" # wifi signal icon 아이콘
                      text_font: font_30  ## wifi_40 # wifi signal icon 아이콘
                      text_align: LEFT
                      text_color: 0x21DE0D # wifi 연결신호 크기별 green 색으로 표시 관련정보는 wifi_connection_signal 검색 적용 font_30  ## wifi_40 폰트 적용
                on_press: 
                  - switch.turn_on:   # 재시작 reboot 동작 restart_node
                      id: restart_id
            - button:
                x: 0
                id: ap_connected_button
                align: TOP_RIGHT
                styles: style_header_footer_top
                height: 49
                width: 59 # 78
                widgets:
                  - label:
                      id: ap_connected
                      align: TOP_RIGHT
                      text: "\U000F0318"  # ap_conected 동작 (동일위치)
                      text_font: font_30  ## wifi_40 # ap icon 아이콘
                      text_align: LEFT
                      text_color: 0xFFFFFF # wifi 연결신호 크기별 green 색으로 표시 관련정보는 wifi_connection_signal 검색 적용 font_30  ## wifi_40 폰트 적용
                  - label:
                      id: ap_disconnected
                      align: TOP_RIGHT
                      text: "\U000F0319"  # ap_disconectrd 동작 (동일위치)
                      text_font: font_30  ## wifi_40 # ap icon 아이콘
                      text_align: LEFT
                      text_color: 0xFF0000 # wifi 연결신호 크기별 green 색으로 표시 관련정보는 wifi_connection_signal 검색 적용 font_30  ## wifi_40 폰트 적용

                on_press: 
                  - switch.turn_on:   # 재시작 reboot 동작 restart_node
                      id: restart_id


  pages:
# ############################################ @page_main 2025_0522_1211_36
    - id: page_booting
 
      widgets:
 #-------------------------------------------                
        - obj:
            x: 0
            y: 0
            align: TOP_LEFT
            styles: style_card
            width: 100%
            height: 100%
            widgets:  
              - obj:
                  x: 0
                  y: 0
                  align: CENTER
                  styles: style_time
                  width: 100%
                  height: 100%
                  widgets:                
      # -------------------------------------------------  
                    - spinner:
                        id: spinner_id_1
                        align: CENTER
                        x: 0
                        y: 0
                        width: 100
                        height: 100
                        spin_time: 5s
                        arc_length: 20deg
                        arc_color: 0xff0000  # 빨강 (Red)
                        indicator:
                          arc_color: 0x00ff00  # 초록 (Green)
                        styles: style_time
                        arc_width: 10
      
                    - spinner:
                        id: spinner_id_2
                        align: CENTER
                        x: 0
                        y: 0
                        width: 175
                        height: 175
                        spin_time: 5s
                        arc_length: 30deg
                        arc_color: 0x00ff00  # 초록 (Green) ## 0x0000ff  # 파랑 (Red)
                        indicator:
                          arc_color: 0x0000ff  # 파랑 (Blue)
                        styles: style_time
                        arc_width: 20

                    - spinner:
                        id: spinner_id_3
                        align: CENTER
                        x: 0
                        y: 0
                        width: 250
                        height: 250
                        spin_time: 5s
                        arc_length: 30deg
                        arc_color: 0x0000ff  # 파랑 (Blue)
                        indicator:
                          arc_color: 0xff0000  # 빨강 (Red)
                        styles: style_time
                        arc_width: 30         

              - obj:
                  x: 0
                  y: 0
                  align: TOP_LEFT
                  styles: style_time
                  width: 100%
                  height: 100%
                  widgets:  
                    - label:  #  
                        id: page_booting_label_2
                        align: TOP_LEFT
                        text: "page_booting"     
                        long_mode: SCROLL_CIRCULAR 
                        width: 100%       
                        text_align: LEFT
                        text_color: 0xFFFF00
                        text_font: font_30
                        y: 20         
                    - label:
                        align: TOP_LEFT # BOTTOM_MID
                        id: page_booting_label_1
                        text: "Booting, waiting 5 seconds... Moving to the main screen once the time is set via Wi-Fi."
                        ##	"Booting, waiting 5 seconds... Moving to the main screen under the condition that the time is set via Wi-Fi."
                        long_mode: SCROLL_CIRCULAR 
                        width: 700  # ← 중요! 글자보다 짧게          
                        text_align: LEFT
                        text_color: 0xFFFF00
                        text_font: font_40
                        y: 250

                  on_click:
                    - lvgl.page.show: all_page_menu      
                                            
              - button:
                  x: 0
                  y: 0
                  id: ap_connected_button_booting
                  align: CENTER
                  styles: style_time
                  height: 100
                  width: 100 # 78
                  widgets:
                    - label:
                        id: ap_connected_booting
                        align: CENTER
                        text: "\U000F0318"  # ap_conected 동작 (동일위치)
                        text_font: font_ap100  ## wifi_40 # ap icon 아이콘
                        text_align: CENTER
                        text_color: 0xFFFFFF # wifi 연결신호 크기별 green 색으로 표시 관련정보는 wifi_connection_signal 검색 적용 font_40  ## wifi_40 폰트 적용
                        styles: style_time
                    - label:
                        id: ap_disconnected_booting
                        align: CENTER
                        text: "\U000F0319"  # ap_disconectrd 동작 (동일위치)
                        text_font: font_ap100  ## wifi_40 # ap icon 아이콘
                        text_align: CENTER
                        text_color: 0xFF0000 # wifi 연결신호 크기별 green 색으로 표시 관련정보는 wifi_connection_signal 검색 적용 font_40  ## wifi_40 폰트 적용
                        styles: style_time

                  on_press: 
                    - switch.turn_on:   # 재시작 reboot 동작 restart_node
                        id: restart_id


              - button:
                  align: BOTTOM_RIGHT
                  width: 60
                  height: 30
                  bg_color: 0x0000FF # 0x2F8CD8  
                  radius: 10          # ✅ 원형 버튼는 width와 height 동일사이즈 1/2 이면 30 30 15 OK 
                  outline_width: 1    # ✅ 테두리는 생기지만 둥글지 않음 (각진 테두리 허용)
                  x: 0
                  widgets:
                    - label:
                        align: CENTER
                        text: "\U000F0CDD"  # back_icon  20 font
                        text_font: icon_font_30
                        text_color: 0xFFFFFF
                        
                  on_press:
                    then:
                      - lvgl.page.show: all_page_menu
                      - delay: 500ms
                      - lvgl.tabview.select:
                          id: tabview_all_page_menu
                          index: 0  # all_page_menu 1개에서 1개적용
                          animated: true                    
 
  # pages:
    - id: all_page_menu
      widgets:
 
      - obj:
          x: 0
          y: 0
          align: TOP_LEFT
          styles: style_card
          width: 100%
          height: 100% # 100%
          widgets:            
            - tabview:  # 탭뷰 하단메뉴 표시
                id: tabview_all_page_menu
                position: bottom
                styles: style_time
                
                tab_style:
                  styles: style_time
                  items:
                    text_color: 0xE5E5E5
                    text_font: font_25
                    height: 20                    
                    pressed:
                      text_color: 0xE5E5E5
                    checked: 
                      text_color: 0xF7F703
                tabs:
                          
# ==================>==================================================  
## ============  추가적으로 계속복사 메뉴 복사 ========================= 
                  - name: "\U000F1443" 
                    id: tab_time
# ==================>=================================================           
                    widgets:
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_time
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
### 999999999999999999999999999999999999999999999999999999999999999999999999999999
                            - obj:
                                x: 0
                                y: 0
                                align: TOP_MID          
                                bg_color: 0x000000
                                bg_opa: 30%
                                styles: style_time
                                width: 100%
                                height: 270
                                widgets:       
##### 9999999999999999999999999999999999999999999999999999999999999999999999999999
                                  - label:
                                      align: TOP_MID
                                      text: '@tab_time'
                                      text_font: font_15
                                      text_color: 0x00FFFF   
                                      x: 0
                                      y: 0
                                      text_align: CENTER
                                      width: 100%                                      
# -----------------------------------------------------------
                                  - image:
                                      x: 0
                                      y: 0
                                      align: TOP_LEFT
                                      id: home_weather_icon # 
                                      src: hail
                                      antialias: true
                                      zoom: 0.7   #확대 배율  


                                  - label:
                                      id: time_clock_big
                                      text: "#FFFF00 🌇# 12:34:56"  # 🔹 🌇 이모지 포함
                                      align: TOP_MID
                                      text_font: font_D_90
                                      text_color: 0xFFFF00
                                      x: 30
                                      y: 10
                                      text_align: CENTER
                                      recolor: true  # 🔹 Recolor 기능 활성화

                                  - label:
                                      id: date_clock_ampm
                                      text: "오전"
                                      align: TOP_RIGHT
                                      text_font: font_30
                                      text_color: 0xFFFFFF
                                      x: -20
                                      y: 20
                                      text_align: LEFT

                                  - label:
                                      id: clock_time_sec ## date_clock_sec
                                      text: ".59"  # 초시계
                                      align: TOP_RIGHT
                                      text_font: font_i_30
                                      text_color: 0xFFFF00
                                      x: -40 
                                      y: 60
                                      text_align: LEFT
 
                                  - label:
                                      id: date_clock_big
                                      text: "2000-00-00(토)"
                                      align: BOTTOM_RIGHT
                                      text_font: font_30
                                      text_color: 0xFFFFFF
                                      x: 0
                                      y: 0
                                      text_align: LEFT
                                      recolor: true  # 🔹 Recolor 기능 활성화

                                  - label:
                                      text: "---W"
                                      id: energy_meter_power_title
                                      text_font: font_30
                                      text_color: 0xFFFF00 
                                      align: BOTTOM_LEFT 
                                      x: 0
                                      y: 0
                                      text_align: LEFT
                                  - label:
                                      text: "wifi"  # 100%
                                      id: label_wifi_signal_percent2_txt
                                      text_font: font_30 
                                      align: BOTTOM_LEFT             
                                      x: 90
                                      text_align: LEFT
                                      text_color: 0x00FF00 
                                  - label:
                                      text: "맑음"
                                      x: 10
                                      y: 0
                                      width: 150
                                      align: TOP_LEFT
                                      id: home_condition_day_label_big_11  # 지금날씨
                                      text_align: LEFT
                                      text_font: font_30
                                      text_color: 0xFFFF00
                                      styles: style_time
                                      long_mode: SCROLL_CIRCULAR    
                                          
                                  - label:
                                      text: "15°"
                                      x: 80
                                      y: 60
                                      align: TOP_LEFT
                                      id: home_weather_now_temp  # 체감온도 지금온도
                                      text_align: LEFT
                                      text_font: font_30
                                      text_color: 0xFFFF00  
                                      styles: style_card                     
                                          
                                                           
# #---------------------------------^-----------------------    
## 주간온도  일기예보
                            - obj:
                                x: 5
                                y: 40
                                align: TOP_LEFT
                                width: 100%
                                height: 250
                                styles: style_time
                                widgets:
  # ----------------------------------------------------------------00000000000000000
                                  - obj:
                                      x: 5
                                      y: 5
                                      align: TOP_LEFT
                                      width: 120
                                      height: 230
                                      styles: style_time
                                      widgets:            
                                        #   # day_0
      
                                      #   # day_0
                                      - label:
                                          id: home_day_label_condition_0   # weather_daily_forecast_home_day_0
                                          text: "월"
                                          x: 0
                                          y: 50
                                          text_font: font_30
                                          text_align: CENTER
                                          align: TOP_MID
                                      
                                      - image:
                                          x: 0
                                          y: 80
                                          styles: style_time
                                          bg_opa: TRANSP
                                          id: home_day_image_condition_0
                                          src: hail  # 초기 이미지
                                          antialias: true
                                          zoom: 0.5
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_day_weather_condition_0
                                          text: "맑음"
                                          x: 0
                                          y: 85
                                          text_font: font_21
                                          text_color: 0xFFFF00
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_hi_label_condition_0
                                          text: "20°C"
                                          x: -20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0xFF0000
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_lo_label_condition_0
                                          text: "8°C"
                                          x: 20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0x00FF00                                             
                                          text_align: CENTER
                                          align: TOP_MID

  # ----------------------------------------------------------------11111111111111111111      
 
                                  - obj:
                                      x: 105
                                      y: 5
                                      align: TOP_LEFT
                                      width: 120
                                      height: 230
                                      styles: style_time
                                      widgets:            
                                        #   # day_1
 
                                      #   # day_0
                                      - label:
                                          id: home_day_label_condition_1   # weather_daily_forecast_home_day_0
                                          text: "월"
                                          x: 0
                                          y: 50
                                          text_font: font_30
                                          text_align: CENTER
                                          align: TOP_MID
                                      
                                      - image:
                                          x: 0
                                          y: 80
                                          styles: style_time
                                          bg_opa: TRANSP
                                          id: home_day_image_condition_1
                                          src: hail  # 초기 이미지
                                          antialias: true
                                          zoom: 0.5
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_day_weather_condition_1
                                          text: "맑음"
                                          x: 0
                                          y: 85
                                          text_font: font_21
                                          text_color: 0xFFFF00
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_hi_label_condition_1
                                          text: "20°C"
                                          x: -20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0xFF0000
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_lo_label_condition_1
                                          text: "8°C"
                                          x: 20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0x00FF00                                             
                                          text_align: CENTER
                                          align: TOP_MID
  #------------------------------------------------------------------  222222222222222222222222222222     

                                  - obj:
                                      x: 205
                                      y: 5
                                      align: TOP_LEFT
                                      width: 120
                                      height: 230
                                      styles: style_time
                                      widgets:            
                                        #   # day_2
 
                                      #   # day_0
                                      - label:
                                          id: home_day_label_condition_2   # weather_daily_forecast_home_day_0
                                          text: "월"
                                          x: 0
                                          y: 50
                                          text_font: font_30
                                          text_align: CENTER
                                          align: TOP_MID
                                      
                                      - image:
                                          x: 0
                                          y: 80
                                          styles: style_time
                                          bg_opa: TRANSP
                                          id: home_day_image_condition_2
                                          src: hail  # 초기 이미지
                                          antialias: true
                                          zoom: 0.5
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_day_weather_condition_2
                                          text: "맑음"
                                          x: 0
                                          y: 85
                                          text_font: font_21
                                          text_color: 0xFFFF00
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_hi_label_condition_2
                                          text: "20°C"
                                          x: -20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0xFF0000
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_lo_label_condition_2
                                          text: "8°C"
                                          x: 20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0x00FF00                                             
                                          text_align: CENTER
                                          align: TOP_MID
  # ----------------------------------------------------------------3333333333333333333
  
                                  - obj:
                                      x: 305
                                      y: 5
                                      align: TOP_LEFT
                                      width: 120
                                      height: 230
                                      styles: style_time
                                      widgets:            
                                        #   # day_3
 
                                      #   # day_0
                                      - label:
                                          id: home_day_label_condition_3   # weather_daily_forecast_home_day_0
                                          text: "월"
                                          x: 0
                                          y: 50
                                          text_font: font_30
                                          text_align: CENTER
                                          align: TOP_MID
                                      
                                      - image:
                                          x: 0
                                          y: 80
                                          styles: style_time
                                          bg_opa: TRANSP
                                          id: home_day_image_condition_3
                                          src: hail  # 초기 이미지
                                          antialias: true
                                          zoom: 0.5
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_day_weather_condition_3
                                          text: "맑음"
                                          x: 0
                                          y: 85
                                          text_font: font_21
                                          text_color: 0xFFFF00
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_hi_label_condition_3
                                          text: "20°C"
                                          x: -20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0xFF0000
                                          text_align: CENTER
                                          align: TOP_MID

                                      - label:
                                          id: home_temperature_day_lo_label_condition_3
                                          text: "8°C"
                                          x: 20
                                          y: 170
                                          text_font: font_20
                                          text_color: 0x00FF00                                             
                                          text_align: CENTER
                                          align: TOP_MID

# --------------------------------------------------------------- end weaher      

              ### 88888888888888888888888888888888888888888
                    - button:
                        id: full_touch_button_page_tab_time_index_1
                        align: TOP_LEFT 
                        x: 0
                        y: 0
                        styles: style_time # card # 먼저 card로 위치 지정면적을 구성 확인 후 card ->  style_time            
                        width: 50% # 전체 호면으로 터치 구성  버튼은 뒤로위치
                        height: 100% # 전체 호면으로 터치 구성 버튼은 뒤로위치                           
                        on_click:
                          # - lvgl.page.show: all_page_menu # time_page에서 화면터치시 main_page이동
                          # - delay: 500ms
                          - lvgl.tabview.select:
                              id: tabview_all_page_menu
                              index: 1
                              animated: true
              ##### 999999999999999999999999999999999999999999999            
                    - button:
                        id: full_touch_button_page_tab_time_index_2
                        align: TOP_RIGHT 
                        x: 0
                        y: 0
                        styles: style_time # card # 먼저 card로 위치 지정면적을 구성 확인 후 card ->  style_time            
                        width: 50% # 전체 호면으로 터치 구성  버튼은 뒤로위치
                        height: 100% # 전체 호면으로 터치 구성 버튼은 뒤로위치                           
                        on_click:
                          # - lvgl.page.show: all_page_menu # time_page에서 화면터치시 main_page이동
                          # - delay: 500ms
                          - lvgl.tabview.select:
                              id: tabview_all_page_menu
                              index: 2
                              animated: true
              ##### 999999999999999999999999999999999999999999999 
                    - button:
                        align: RIGHT_MID
                        width: 60
                        height: 30
                        bg_color: 0x0000FF # 0x2F8CD8  
                        radius: 10          # ✅ 원형 버튼는 width와 height 동일사이즈 1/2 이면 30 30 15 OK 
                        outline_width: 1    # ✅ 테두리는 생기지만 둥글지 않음 (각진 테두리 허용)
                        x: 0
                        widgets:
                          - label:
                              align: RIGHT_MID
                              text: "\U000F0CDD"  # back_icon  20 font
                              text_font: icon_font_30
                              text_color: 0xFFFFFF
                              
                        on_press:
                          then:
                            - lvgl.page.show: all_page_menu
                            - delay: 500ms
                            - lvgl.tabview.select:
                                id: tabview_all_page_menu
                                index: 2
                                animated: true
# ==================>=========================================              
                  - name: "\U000F0EBA"
                    id: home_tab
# ==================>=========================================              
# ==================>=================================================              
                    widgets:
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_time
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
                          
### 999999999999999999999999999999999999999999999999999999999999999999999999999999
                          - obj:
                              x: 0
                              y: 0
                              align: TOP_MID          
                              bg_color: 0x000000
                              bg_opa: 30%
                              styles: style_time
                              width: 100%
                              height: 270
                              widgets:       

                        #####999999999999999999999999999999999999 버튼및 메뉴 구성 
                                - label:
                                    align: TOP_MID
                                    y: 2 # distance down from top
                                    text: '@tab_home'
                                    text_color: 0x00FFFF  
                                    text_font: font_15 

        
                                - obj:
                                    x: 0
                                    y: 20
                                    align: TOP_LEFT
                                    styles: style_icon
                                    width: 100%
                                    height: 270 # tabview 의 제외 영역

                                    # 레이아웃을 3행 3열로 설정합니다.
                                    layout:
                                      type: grid      
                                      grid_columns: [ fr(1), fr(1), fr(1) ]  # 3개의 동일한 너비의 열로 설정
                                      grid_rows: [ fr(1), fr(1) ]  # 3개의 동일한 높이의 행으로 설정                                
                                      pad_row: 5px  # 각 행 간 간격을 20px로 설정 위아래
                                      pad_column: 5px  # 각 열 간 간격을 10px로 설정 죄우
                                      grid_column_align: SPACE_BETWEEN  # 열 간 간격 동일하게 배치
                                      grid_row_align: SPACE_BETWEEN  # 행 간 간격 동일하게 배치

                                    widgets:  
                                
                                      # 첫 번째 버튼 (날씨 조명)
                                      # - button:
                                      - button:
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 0
                                          height: 100 #120
                                          width: 130 #130
                                          styles: style_button
                                          on_press:
                                            then:
                                              - lvgl.page.show: all_page_menu
                                              - delay: 500ms
                                              - lvgl.tabview.select:
                                                  id: tabview_all_page_menu
                                                  index: 0
                                                  animated: true

                                              - lambda: |-
                                                  static bool toggle_state = false;
                                                  toggle_state = !toggle_state;
                                                  auto label = id(button_name_color_tab_home_change1);  // Label의 ID 참조
                                                  if (toggle_state) {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                  } else {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                  }                                                      
                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                text: "\U000F1443"  # time
                                                text_font: icon_font_50
                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: "시계"
                                                text_font: font_20
                                                id: button_name_color_tab_home_change1
            
                                            

                                      # 두 번째 버튼 (라디오)
                                      - button:
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 1
                                          height: 100 #120
                                          width: 130 #130
                                          styles: style_button
                                          on_press:
                                            then:
                                              - lvgl.page.show: all_page_menu
                                              - delay: 500ms
                                              - lvgl.tabview.select:
                                                  id: tabview_all_page_menu
                                                  index: 2 
                                                  animated: true

                                              - lambda: |-
                                                  static bool toggle_state = false;
                                                  toggle_state = !toggle_state;
                                                  auto label = id(button_name_color_tab_home_change2);  // Label의 ID 참조
                                                  if (toggle_state) {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                  } else {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                  }                                                             
                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                text: "\U000F07C1" # dip switch
                                                text_font: icon_font_50
                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: "조명"
                                                text_font: font_20    
                                                id: button_name_color_tab_home_change2

                                      # 세 번째 버튼 (센서)
                                      - button:
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 2
                                          height: 100 #120
                                          width: 130 #130
                                          styles: style_button
                                          on_press:
                                            then:
                                              - lvgl.page.show: all_page_menu
                                              - delay: 500ms
                                              - lvgl.tabview.select:
                                                  id: tabview_all_page_menu
                                                  index: 3
                                                  animated: true

                                              - lambda: |-
                                                  static bool toggle_state = false;
                                                  toggle_state = !toggle_state;
                                                  auto label = id(button_name_color_tab_home_change3);  // Label의 ID 참조
                                                  if (toggle_state) {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                  } else {
                                                      lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                  }                                                               
                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                
                                                text: "\U000F1C6D" # "\U000F1C6D", # INFO icon
                                                text_font: icon_font_50
                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: "정보"
                                                text_font: font_20
                                                id: button_name_color_tab_home_change3

                                      # 세 번째 버튼 (센서)
                                      
                                      # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 0
                                          height: 100
                                          width: 130
                                          id: btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_light_bookroom_sw2} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_tab_home_change4);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }          

                               

                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                text: "\U000F097E" ## 스위치 아이콘
                                                text_font: icon_font_50
                                                id: lbl_btn_light_bookroom1
                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: ${entity_id_light_bookroom_sw2_name} ##"서재불sw"
                                                text_font: font_20
                                                id: button_name_color_tab_home_change4

 

                                      # 세 번째 버튼 (센서)
                                    
                                      - button:
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 1
                                          height: 100 #120
                                          width: 130 #130
                                          styles: style_button
                                          id: btn_computer_on
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.turn_on
                                                data:
                                                  entity_id: ${entity_id_computer_switch}  # 컴퓨터 스위치 ON

                                            - homeassistant.service: 
                                                service: switch.turn_on
                                                data:
                                                  entity_id: ${entity_id_monitor_plug_switch}  # 모니터 플러그 ON

                                            - homeassistant.service: 
                                                service: switch.turn_on ### on 동작시
                                                data:
                                                  entity_id: ${entity_id_computer_amp_on_esp32}  # 앰프 ON

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_tab_home_change5);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }        
 

                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                text: "\U000F097E" ## 스위치20 icon
                                                text_font: icon_font_50
                                                id: lbl_btn_computer_on

                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: "컴퓨터on"
                                                text_font: font_20
                                                id: "button_name_color_tab_home_change5"
 

                                      - button:
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 2
                                          height: 100 #120
                                          width: 130 #130
                                          styles: style_button
                                          id: btn_computer_off
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.turn_off
                                                data:
                                                  entity_id: ${entity_id_computer_switch}  # 컴퓨터 스위치 ON

                                            - homeassistant.service: 
                                                service: switch.turn_off
                                                data:
                                                  entity_id: ${entity_id_monitor_plug_switch}  # 모니터 플러그 ON

                                            - homeassistant.service: ### off 동작시 
                                                service: switch.turn_off
                                                data:
                                                  entity_id: ${entity_id_computer_amp_off_esp32}  # 앰프 ON

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_tab_home_change6);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }        
                                                   
 
                                          widgets:
                                            - label:
                                                y: -5
                                                align: TOP_MID
                                                text: "\U000F1A24" ## 스위치20 switch off icon
                                                text_font: icon_font_50
                                                id: lbl_btn_computer_off
                                            - label:
                                                y: 5
                                                align: BOTTOM_MID
                                                text: "컴퓨터off"
                                                text_font: font_20      
                                                id: button_name_color_tab_home_change6

## ============  추가적으로 계속복사 메뉴 복사 =========================
                  - name: "\U000F0335" 
                    id: Right_tab
# ==================>=================================================              
# ==================>=================================================              
                    widgets:
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_time
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
### 999999999999999999999999999999999999999999999999999999999999999999999999999999
                          - obj:
                              x: 0
                              y: 0
                              align: TOP_MID          
                              bg_color: 0x000000
                              bg_opa: 30%
                              styles: style_time
                              width: 100%
                              height: 270
                              widgets:          
##### 9999999999999999999999999999999999999999999999999999999999999999999999999999
                                - label:
                                    align: TOP_MID
                                    y: 0 # distance down from top
                                    text: '@tab_Right'
                                    text_color: 0x00FFFF   
                                    text_font: font_15
# -----------------------------------------------------------
          #  "\U000F0335", # mdi:lightbulb  U000F0335
          # "\U000F1A24", ## 스위치20 switch off icon
          # "\U000F1A3A",  # fan
        
                                - obj:
                                    x: 0
                                    y: 10
                                    align: TOP_LEFT
                                    styles: style_icon
                                    width: 100%
                                    height: 270 # tabview 의 제외 영역

                                    # 레이아웃을 3행 3열로 설정합니다.
                                    layout:
                                      type: grid      
                                      grid_columns: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 너비의 열로 설정
                                      grid_rows: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 높이의 행으로 설정                                
                                      pad_row: 2px  # 각 행 간 간격을 20px로 설정 위아래
                                      pad_column: 5px  # 각 열 간 간격을 10px로 설정 죄우
                                      grid_column_align: SPACE_BETWEEN  # 열 간 간격 동일하게 배치
                                      grid_row_align: SPACE_BETWEEN  # 행 간 간격 동일하게 배치

                                    widgets:  
    
                                      # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 100
                                          id: btn_light_1 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: light.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_1}
                                                  
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change1);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_1 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_1} #
                                                text_font: font_20
                                                id: button_name_color_sw_light_change1

                                       # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 1
                                          height: 50
                                          width: 100
                                          id: btn_light_2 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: light.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_2} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용
                                                  
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change2);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    


                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_2 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_2} #
                                                text_font: font_20
                                                id: button_name_color_sw_light_change2

                                       # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 2
                                          height: 50
                                          width: 100
                                          id: btn_light_3 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: light.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_3} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용
    
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change3);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_3 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_3} #
                                                text_font: font_20
                                                id: button_name_color_sw_light_change3
                                       # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 3
                                          height: 50
                                          width: 100
                                          id: btn_light_4 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: light.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_4} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change4);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_4 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_4} #
                                                text_font: font_20
                                                id: button_name_color_sw_light_change4
                                       # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 100
                                          id: btn_light_5 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: light.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_5} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change5);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_5 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_5} #
                                                text_font: font_20
                                                id: button_name_color_sw_light_change5

                                       # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 1
                                          height: 50
                                          width: 100
                                          id: btn_light_6 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_6} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change6);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_6 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_6} #
                                                text_font: font_20          
                                                id: button_name_color_sw_light_change6

                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 2
                                          height: 50
                                          width: 100
                                          id: btn_light_7 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_7} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change7);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_7 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_7} #
                                                text_font: font_20         
                                                id: button_name_color_sw_light_change7

                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 3
                                          height: 50
                                          width: 100
                                          id: btn_light_8 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_8} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change8);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_8 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_8} #
                                                text_font: font_20 
                                                id: button_name_color_sw_light_change8          
                                      - button: 
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 100
                                          id: btn_light_9 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_9} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change9);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    

                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_9 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_9} #
                                                text_font: font_20        
                                                id: button_name_color_sw_light_change9

                                      - button: 
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 1
                                          height: 50
                                          width: 100
                                          id: btn_light_10 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_10} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change10);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                                
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_10 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_10} #
                                                text_font: font_20       
                                                id: button_name_color_sw_light_change10

                                      - button: 
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 2
                                          height: 50
                                          width: 100
                                          id: btn_light_11 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_11} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change11);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                                
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_11 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_11} #
                                                text_font: font_20        
                                                id: button_name_color_sw_light_change11

                                      - button: 
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 3
                                          height: 50
                                          width: 100
                                          id: btn_light_12 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_12} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change12);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_12 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_12} #
                                                text_font: font_20   
                                                id: button_name_color_sw_light_change12    

                                      - button: 
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 100
                                          id: btn_light_13 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_13} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change13);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_13 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_13} #
                                                text_font: font_20      
                                                id: button_name_color_sw_light_change13  

                                      - button: 
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 1
                                          height: 50
                                          width: 100
                                          id: btn_light_14 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_14} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change14);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_14 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_14} #
                                                text_font: font_20      
                                                id: button_name_color_sw_light_change14  

                                                
                                      - button: 
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 2
                                          height: 50
                                          width: 100
                                          id: btn_light_15 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_15} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change15);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_15 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_15} #
                                                text_font: font_20        
                                                id: button_name_color_sw_light_change15

                                      - button: 
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 3
                                          height: 50
                                          width: 100
                                          id: btn_light_16 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_light_16} # switch.seojae_bul_left_2 "switch.seojae_bul_left_2"  # Home Assistant 엔티티를 직접 사용

                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_light_change16);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }    
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_light_16 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_light_name_16} #
                                                text_font: font_20        
                                                id: button_name_color_sw_light_change16



## ============  추가적으로 계속복사 메뉴 복사 ========================= U000F097E
                  - name: "\U000F1A25" 
                    id: switch_tab
# ==================>=================================================              
# ==================>=================================================              
                    widgets:
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_time
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
### 999999999999999999999999999999999999999999999999999999999999999999999999999999
                          - obj:
                              x: 0
                              y: 0
                              align: TOP_MID          
                              bg_color: 0x000000
                              bg_opa: 30%
                              styles: style_time
                              width: 100%
                              height: 270
                              widgets:          
##### 9999999999999999999999999999999999999999999999999999999999999999999999999999
                                - label:
                                    align: TOP_MID
                                    y: 0 # distance down from top
                                    text: '@tab_switch'
                                    text_color: 0x00FFFF   
                                    text_font: font_15
# -----------------------------------------------------------
          #  "\U000F0335", # mdi:lightbulb  U000F0335
          # "\U000F1A24", ## 스위치20 switch off icon
          # "\U000F1A3A",  # fan
        
                                - obj:
                                    x: 0
                                    y: 10
                                    align: TOP_LEFT
                                    styles: style_icon
                                    width: 100%
                                    height: 270 # tabview 의 제외 영역

                                    # 레이아웃을 3행 3열로 설정합니다.
                                    layout:
                                      type: grid      
                                      grid_columns: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 너비의 열로 설정
                                      grid_rows: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 높이의 행으로 설정                                
                                      pad_row: 2px  # 각 행 간 간격을 20px로 설정 위아래
                                      pad_column: 5px  # 각 열 간 간격을 10px로 설정 죄우
                                      grid_column_align: SPACE_BETWEEN  # 열 간 간격 동일하게 배치
                                      grid_row_align: SPACE_BETWEEN  # 행 간 간격 동일하게 배치

                                    widgets:  
    
                                      # 버튼 설정
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 100
                                          id: btn_switch_1 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_switch_1} # 
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_change1);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }       
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_switch_1 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_switch_name_1} # lbl_btn_switch_1
                                                text_font: font_20
                                                id: button_name_color_sw_change1

                                      # 버튼 설정  2025_0420_1107_28
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 2
                                          height: 50
                                          width: 100
                                          id: btn_switch_2 # btn_light_bookroom1
                                          styles: 
                                            - style_button
                                          on_press: 
                                            - homeassistant.service: 
                                                service: switch.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_switch_2} # 
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_sw_change2);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }       
                                          widgets:
                                            - label:
                                                y: -10
                                                align: TOP_MID
                                                text: "\U000F0335" ## lightbulb 아이콘
                                                text_font: icon_font_30
                                                id: lbl_btn_switch_2 # lbl_btn_light_bookroom1
                                            - label:
                                                y: 10
                                                align: BOTTOM_MID
                                                text: ${entity_id_lbl_btn_switch_name_2} # tv전원
                                                text_font: font_20
                                                id: button_name_color_sw_change2
  # entity_id_lbl_btn_switch_name_2: "TV전원"
  # entity_id_lbl_btn_switch_2: "switch.tv_socket_1"
  
## ============  추가적으로 계속복사 메뉴 복사 =========================
                  - name: "\U000F0F54" # 보일러 \U000F097E" # "\U000F097E" ## 스위치20 icon 
                    id: climate_tab
# ==================>=================================================              
# ==================>=================================================              
                    widgets:

                          
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_time
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
### 999999999999999999999999999999999999999999999999999999999999999999999999999999 climate.imazu_36_thermostat_1_1

                          - obj:
                              x: 0
                              y: 0
                              align: TOP_MID          
                              bg_color: 0x000000
                              bg_opa: 30%
                              styles: style_time
                              width: 100%
                              height: 270
                              widgets:         
##### 9999999999999999999999999999999999999999999999999999999999999999999999999999
                                - label:
                                    align: TOP_MID
                                    y: 2 # distance down from top
                                    text: '@tab_climate' 
                                    text_color: 0x00FFFF   
                                    text_font: font_15

                                - obj:
                                    x: 0
                                    y: 10
                                    align: TOP_LEFT
                                    styles: style_icon
                                    width: 210
                                    height: 250 # tabview 의 제외 영역

                                    # 레이아웃을 3행 3열로 설정합니다.
                                    layout:
                                      type: grid      
                                      grid_columns: [ fr(1) ]  # 3개의 동일한 너비의 열로 설정
                                      grid_rows: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 높이의 행으로 설정                                
                                      pad_row: 2px  # 각 행 간 간격을 20px로 설정 위아래
                                      pad_column: 5px  # 각 열 간 간격을 10px로 설정 죄우
                                      grid_column_align: SPACE_BETWEEN  # 열 간 간격 동일하게 배치
                                      grid_row_align: SPACE_BETWEEN  # 행 간 간격 동일하게 배치
                                    widgets:  
 # 88888 ====================================================================================
                                      - button: 
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 200  
                                          id: btn_climate_1
                                          styles: 
                                            - style_button
                                          # on_short_click:
                                          on_press:   
                                            - homeassistant.action:
                                                action: climate.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_1}    #entity_id: climate.485_ttl_esp32_ip109_boiler_book_room # entity_id  =====================================
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_change1);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }
                                                

                                          widgets:
                                            - label:
                                                x: -20
                                                y: 0                                              
                                                id: lbl_btn_climate_1
                                                align: LEFT_MID  # Center the label vertically and horizontally                                    
                                                text_font: font_30  # Adjust text font size
                                                text: "\U000F0425" # POWER ICON F0425  
                                                text_align: LEFT
                                                text_color: 0xFF0000
                                            - label:
                                                x: -20
                                                y: 0
                                                align: CENTER
                                                text: ${entity_id_lbl_btn_climate_name_1} # "서재"
                                                id: button_name_color_change1
                                                text_font: font_20
                                                text_color: 0xFFFFFF
                                                text_align: CENTER
                                                
                                                # styles: style_card
                                            - label:
                                                id: current_climate_censor_txt_1
                                                x: 15
                                                y: 0
                                                align: RIGHT_MID
                                                text: "26C"  # 현제 온도
                                                text_font: font_30
                                                text_color: 0xFFFF00
                                                text_align: RIGHT
# # 88888 ==================================================================================== 99999999999999
  
 # 88888 ====================================================================================
                                      - button: 
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 200  
                                          id: btn_climate_2
                                          styles: 
                                            - style_button
                                          on_press:
                                            - homeassistant.action:
                                                action: climate.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_2} 
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_change2);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }                                                  
                                          widgets:
                                            - label:
                                                x: -20
                                                y: 0                                              
                                                id: lbl_btn_climate_2
                                                align: LEFT_MID  # Center the label vertically and horizontally                                    
                                                text_font: font_30  # Adjust text font size
                                                text: "\U000F0425" # POWER ICON F0425  
                                                text_align: LEFT
                                                text_color: 0xFF0000
                                            - label:
                                                x: -20
                                                y: 0
                                                align: CENTER
                                                text: ${entity_id_lbl_btn_climate_name_2} # "서재"
                                                id: button_name_color_change2
                                                text_font: font_20
                                                text_color: 0xFFFFFF
                                                text_align: CENTER
                                                # styles: style_card
                                            - label:
                                                id: current_climate_censor_txt_2
                                                x: 15
                                                y: 0
                                                align: RIGHT_MID
                                                text: "26C"  # 현제 온도
                                                text_font: font_30
                                                text_color: 0xFFFF00
                                                text_align: RIGHT
# 88888 ==================================================================================== 99999999999999
 # 88888 ====================================================================================
                                      - button: 
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 200  
                                          id: btn_climate_3
                                          styles: 
                                            - style_button
                                          on_press:
                                            - homeassistant.action:
                                                action: climate.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_3}  
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_change3);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }                                                  
                                          widgets:
                                            - label:
                                                x: -20
                                                y: 0                                              
                                                id: lbl_btn_climate_3
                                                align: LEFT_MID  # Center the label vertically and horizontally                                    
                                                text_font: font_30  # Adjust text font size
                                                text: "\U000F0425" # POWER ICON F0425  
                                                text_align: LEFT
                                                text_color: 0xFF0000
                                            - label:
                                                x: -20
                                                y: 0
                                                align: CENTER
                                                text: ${entity_id_lbl_btn_climate_name_3} # "서재"
                                                text_font: font_20
                                                text_color: 0xFFFFFF
                                                text_align: CENTER
                                                id: button_name_color_change3
                                                # styles: style_card
                                            - label:
                                                id: current_climate_censor_txt_3
                                                x: 15
                                                y: 0
                                                align: RIGHT_MID
                                                text: "26C"  # 현제 온도
                                                text_font: font_30
                                                text_color: 0xFFFF00
                                                text_align: RIGHT
# 88888 ==================================================================================== 99999999999999
 # 88888 ====================================================================================
                                      - button: 
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 0
                                          height: 50
                                          width: 200  
                                          id: btn_climate_4
                                          styles: 
                                            - style_button
                                          on_press:
                                            - homeassistant.action:
                                                action: climate.toggle
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_4}
                                                  
                                            - lambda: |-
                                                static bool toggle_state = false;
                                                toggle_state = !toggle_state;
                                                auto label = id(button_name_color_change4);  // Label의 ID 참조
                                                if (toggle_state) {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFF00), LV_PART_MAIN);  // 노랑
                                                } else {
                                                    lv_obj_set_style_text_color(label, lv_color_hex(0xFFFFFF), LV_PART_MAIN);  // white
                                                }         

                                          widgets:
                                            - label:
                                                x: -20
                                                y: 0                                              
                                                id: lbl_btn_climate_4
                                                align: LEFT_MID  # Center the label vertically and horizontally                                    
                                                text_font: font_30  # Adjust text font size
                                                text: "\U000F0425" # POWER ICON F0425  
                                                text_align: LEFT
                                                text_color: 0xFF0000

                                            - label:
                                                x: -20
                                                y: 0
                                                align: CENTER
                                                text: ${entity_id_lbl_btn_climate_name_4} # "서재"
                                                text_font: font_20
                                                text_color: 0xFFFFFF
                                                text_align: CENTER
                                                id: button_name_color_change4
                                                # styles: style_card
                                            - label:
                                                id: current_climate_censor_txt_4
                                                x: 15
                                                y: 0
                                                align: RIGHT_MID
                                                text: "26C"  # 현제 온도
                                                text_font: font_30
                                                text_color: 0xFFFF00
                                                text_align: RIGHT
# 88888 ==================================================================================== 99999999999999
# 88888 ===============================2 열 스라이더 구성 ================================== 99999999999999
                                - obj:
                                    x: 10 # 260
                                    y: 20  #10
                                    align: TOP_MID
                                    styles: style_time
                                    width: 60
                                    height: 250 # tabview 의 제외 영역
 
                                    widgets:  
                                      - label:
                                          x: 0
                                          y: 0 
                                          id: slide_climate_txt_1 # UI TEXT 백라이트 밝기 표시                              
                                          text: "50C"
                                          text_font: font_30
                                          text_color: 0xFFA500
                                          align: TOP_LEFT    
                                      - label:
                                          x: 0
                                          y: 60 
                                          id: slide_climate_txt_2 # UI TEXT 백라이트 밝기 표시                              
                                          text: "50C"
                                          text_font: font_30
                                          text_color: 0xFFA500
                                          align: TOP_LEFT    
                                      - label:
                                          x: 0
                                          y: 125
                                          id: slide_climate_txt_3 # UI TEXT 백라이트 밝기 표시                              
                                          text: "50C"
                                          text_font: font_30
                                          text_color: 0xFFA500
                                          align: TOP_LEFT 
                                      - label:
                                          x: 0
                                          y: 190 
                                          id: slide_climate_txt_4 # UI TEXT 백라이트 밝기 표시                              
                                          text: "50C"
                                          text_font: font_30
                                          text_color: 0xFFA500
                                          align: TOP_LEFT 
# 88888 ==================================================================================== 99999999999999
#  # substitutions:
  # entity_id_lbl_btn_climate_1: "climate.ttlto485s3_ip85_boiler_big_room"
  # entity_id_lbl_btn_climate_name_1: "안방보일러"
 
  # entity_id_lbl_btn_climate_2: "climate.ttlto485s3_ip85_boiler_living_room"
  # entity_id_lbl_btn_climate_name_2: "거실보일러"

  # entity_id_lbl_btn_climate_3: "climate.ttlto485s3_ip85_boiler_book_room"
  # entity_id_lbl_btn_climate_name_3: "서재보일러"

  # entity_id_lbl_btn_climate_4: "climate.ttlto485s3_ip85_boiler_small_room"
  # entity_id_lbl_btn_climate_name_4: "작방보일러" 

                                - obj:
                                    x: 260
                                    y: 10
                                    align: TOP_LEFT
                                    styles: style_icon
                                    width: 200
                                    height: 250 # tabview 의 제외 영역
                                    # 레이아웃을 3행 3열로 설정합니다.
                                    layout:
                                      type: grid      
                                      grid_columns: [ fr(1) ]  # 3개의 동일한 너비의 열로 설정
                                      grid_rows: [ fr(1), fr(1), fr(1), fr(1) ]  # 3개의 동일한 높이의 행으로 설정                                
                                      pad_row: 2px  # 각 행 간 간격을 20px로 설정 위아래
                                      pad_column: 5px  # 각 열 간 간격을 10px로 설정 죄우
                                      grid_column_align: SPACE_BETWEEN  # 열 간 간격 동일하게 배치
                                      grid_row_align: SPACE_BETWEEN  # 행 간 간격 동일하게 배치
                                    widgets:  
 # 88888 ====================================================================================
 
                                      # - button: 
                                      - slider:
                                          x: 0  # x 좌표 조정
                                          grid_cell_row_pos: 0
                                          grid_cell_column_pos: 0  # 오른쪽 열에 배치
                                          height: 50
                                          width: 200 
                                          id: slide_climate_1
                                          adv_hittest: true
                                          # styles: 
                                          #   - style_button
 
                                          pad_all: 8
                                          min_value: 7  # 보일러의 최소 온도
                                          max_value: 35  # 보일러의 최대 온도
                                          border_width: 1
                                          border_opa: 50%
                                          # bg_color: 0xcccaca
                                          bg_color: 0x0000FF
                                          bg_opa: 50%                                
                                          indicator:
                                            bg_color: 0x2F8CD8
                                            bg_opa: COVER
                                            height: 40
                                          knob:
                                            bg_color: 0xFFFFFF                                                           
                                            bg_opa: COVER
                                            width: 45
                                            border_color: 0x0077b3        
                                            border_width: 5
                                            outline_width: 1
                                          on_release:
                                            - homeassistant.service:
                                                service: climate.set_temperature
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_1} # climate.485_ttl_esp32_ip109_boiler_big_room  # sensor  =====================================
                                                  temperature: !lambda 'return (float) lv_slider_get_value(id(slide_climate_1));'

                                            - lvgl.label.update: 
                                                id: slide_climate_txt_1  # sensor  =====================================
                                                text: !lambda |-
                                                  static char buf[15];
                                                  snprintf(buf, sizeof(buf), "%d°C", lv_slider_get_value(id(slide_climate_1))); 
                                                  return {buf};
 
                                          # on_load:
                                            - lambda: |-
                                                lv_obj_add_flag(lv_scr_act(), LV_OBJ_FLAG_CLICKABLE);
                              

                                      - slider:
                                          x: 0  # x 좌표 조정
                                          grid_cell_row_pos: 1
                                          grid_cell_column_pos: 0  # 오른쪽 열에 배치
                                          height: 50
                                          width: 200 
                                          id: slide_climate_2
                                          adv_hittest: true
                                          # styles: 
                                          #   - style_button
                                          pad_all: 8
                                          min_value: 7  # 보일러의 최소 온도
                                          max_value: 35  # 보일러의 최대 온도
                                          border_width: 1
                                          border_opa: 50%
                                          # bg_color: 0xcccaca
                                          bg_color: 0x0000FF
                                          bg_opa: 50%                                
                                          indicator:
                                            bg_color: 0x2F8CD8
                                            bg_opa: COVER
                                            height: 40
                                          knob:
                                            bg_color: 0xFFFFFF                                                           
                                            bg_opa: COVER
                                            width: 45
                                            border_color: 0x0077b3        
                                            border_width: 5
                                            outline_width: 1
                                          on_release:
                                            - homeassistant.service:
                                                service: climate.set_temperature
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_2} #  ============================
                                                  temperature: !lambda 'return (float) lv_slider_get_value(id(slide_climate_2));'

                                            - lvgl.label.update: 
                                                id: slide_climate_txt_2  # sensor  =====================================
                                                text: !lambda |-
                                                  static char buf[15];
                                                  snprintf(buf, sizeof(buf), "%d°C", lv_slider_get_value(id(slide_climate_2))); 
                                                  return {buf};

                                      
                                      - slider:
                                          x: 0  # x 좌표 조정
                                          grid_cell_row_pos: 2
                                          grid_cell_column_pos: 0  # 오른쪽 열에 배치
                                          height: 50
                                          width: 200 
                                          id: slide_climate_3
                                          adv_hittest: true
                                          # styles: 
                                          #   - style_button
                                        
                                          pad_all: 8
                                          min_value: 7  # 보일러의 최소 온도
                                          max_value: 35  # 보일러의 최대 온도
                                          border_width: 1
                                          border_opa: 50%
                                          # bg_color: 0xcccaca
                                          bg_color: 0x0000FF
                                          bg_opa: 50%                      

                                          indicator:
                                            bg_color: 0x2F8CD8
                                            bg_opa: COVER
                                            height: 40
                                          knob:
                                            bg_color: 0xFFFFFF                                                           
                                            bg_opa: COVER
                                            width: 45
                                            border_color: 0x0077b3        
                                            border_width: 5
                                            outline_width: 1
                                          on_release:
                                            - homeassistant.service:
                                                service: climate.set_temperature
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_3} #  ============================
                                                  temperature: !lambda 'return (float) lv_slider_get_value(id(slide_climate_3));'

                                            - lvgl.label.update: 
                                                id: slide_climate_txt_3  # sensor  =====================================
                                                text: !lambda |-
                                                  static char buf[15];
                                                  snprintf(buf, sizeof(buf), "%d°C", lv_slider_get_value(id(slide_climate_3))); 
                                                  return {buf};

                                      - slider:
                                          x: 0  # x 좌표 조정
                                          grid_cell_row_pos: 3
                                          grid_cell_column_pos: 0  # 오른쪽 열에 배치
                                          height: 50
                                          width: 200 
                                          id: slide_climate_4
                                          adv_hittest: true
                                          # styles: 
                                          #   - style_button
                                        
                                          pad_all: 8
                                          min_value: 7  # 보일러의 최소 온도
                                          max_value: 35  # 보일러의 최대 온도
                                          border_width: 1
                                          border_opa: 50%
                                          # bg_color: 0xcccaca
                                          bg_color: 0x0000FF
                                          bg_opa: 50%                                
                                          indicator:
                                            bg_color: 0x2F8CD8
                                            bg_opa: COVER
                                            height: 40
 
                                          knob:
                                            bg_color: 0xFFFFFF                                                           
                                            bg_opa: COVER
                                            width: 45
                                            border_color: 0x0077b3        
                                            border_width: 5
                                            outline_width: 1

                                          on_release:
                                            - homeassistant.service:
                                                service: climate.set_temperature
                                                data:
                                                  entity_id: ${entity_id_lbl_btn_climate_4} #  ============================
                                                  temperature: !lambda 'return (float) lv_slider_get_value(id(slide_climate_4));'

                                            - lvgl.label.update: 
                                                id: slide_climate_txt_4  # sensor  =====================================
                                                text: !lambda |-
                                                  static char buf[15];
                                                  snprintf(buf, sizeof(buf), "%d°C", lv_slider_get_value(id(slide_climate_4))); 
                                                  return {buf};

#### -------------^-------------------------------------------------------

                  - name: "\U000F0439" #${tabview_name_5}  #"\U000F0439" # "\U000F0439" # radio_tab 라디오01
                    id: Radio_tab_3 # ${tabview_id_5} # @radio_tab_3
                    widgets:
      #---------------------^--------------------------------------------------                      
                            - roller:
                                id: radio_media_player_speaker_44 ######  스피커 별 # change item
                                x: 0
                                y: 10                              
                                width: 200
                                height: 50                                 
                                
                                align: LEFT_MID # BOTTOM_MID
                                text_font: font_25
                                text_align: LEFT
                                visible_row_count: 3   # 한번에 보이는 량
                                options: # 글자가 공백이 없어냐 합니다.
                                  - 0_${radio_name_0} ###### 라디오 URL 번호1,2,3, 하단에 메디어 플레이정보 보이게
                                  - 1_${radio_name_1} ###### 라디오 URL 번호1,2,3,
                                  - 2_${radio_name_2} ###### 라디오 URL 번호1,2,3,
                                  - 3_${radio_name_3} ###### 라디오 URL 번호1,2,3,
                                  - 4_${radio_name_4} ###### 라디오 URL 번호1,2,3,
                                  - 5_${radio_name_5} ###### 라디오 URL 번호1,2,3,
                                  - 6_${radio_name_6} ###### 라디오 URL 번호1,2,3,
                                  - 7_${radio_name_7} ###### 라디오 URL 번호1,2,3,
                                  - 8_${radio_name_8} ###### 라디오 URL 번호1,2,3,
                                  - 9_${radio_name_9} ###### 라디오 URL 번호1,2,3,
                                  - 10_${radio_name_10} ###### 라디오 URL 번호1,2,3,
                                  - 11_${radio_name_11} ###### 라디오 URL 번호1,2,3,
                                  - 12_${radio_name_12} ###### 라디오 URL 번호1,2,3,
                                  - 13_${radio_name_13} ###### 라디오 URL 번호1,2,3,
                                  - 14_${radio_name_14} ###### 라디오 URL 번호1,2,3,
                                  - 15_${radio_name_15} ###### 라디오 URL 번호1,2,3,
                                  - 16_${radio_name_16} ###### 라디오 URL 번호1,2,3, 
                                  - 17_${radio_name_17} ###### 라디오 URL 번호1,2,3, Jazz 추가
                                  - 18_${radio_name_18} ###### 라디오 URL 번호1,2,3
                                  - 19_${radio_name_19} ###### 라디오 URL 번호1,2,3

                                on_value:
                                  then:
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 0;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_0}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
 

                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f0}" 
                                    # ------------------------------------------------    
 
                                    - if:
                                        condition:
                                          - lambda: 'return x == 1;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_1}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                          # - lvgl.indicator.update:
                                          #     id: frequency_needle_all44
                                          #     value: ${Radio_frequency_1}  # change                                    
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f1}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 2;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_2}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f2}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 3;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_3}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                   
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f3}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 4;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_4}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                           
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f4}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 5;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_5}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                               
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f5}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 6;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_6}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f6}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 7;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_7}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                 
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f7}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 8;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_8}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                      
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f8}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 9;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_9}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                           
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f9}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 10;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_10}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                                  
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f10}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 11;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_11}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                               
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f11}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 12;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_12}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                              
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f12}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 13;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_13}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                     
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f13}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 14;'  # change 
 
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_14}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                          
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f14}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 15;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_15}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                              
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f15}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 16;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_16}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                           
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f16}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 17;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_17}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                           
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f17}Mhz" 
                                    # -------------------------------------------
                                    - if:
                                        condition:
                                          - lambda: 'return x == 18;'  # change 
                                          
                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_18}"# change   
                                                media_content_type: "music"
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                             
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f18}Mhz" 
                                    # ------------------------------------------------                                                                                 
                                    - if:
                                        condition:
                                          - lambda: 'return x == 19;'  
                                          

                                        then:   
                                          - homeassistant.service:
                                              service: media_player.media_stop
                                              data:
                                                entity_id: !lambda 'return id(previous_media_entity).state;' 

                                          - homeassistant.service:
                                              service: media_player.play_media
                                              data:
                                                entity_id: !lambda 'return id(selected_media_entity).state;'
                                                media_content_id: "${radio_url_19}"
                                                media_content_type: "music"
                                          
                                          - lambda: |-
                                              id(previous_media_entity).publish_state(id(selected_media_entity).state);
                              
                                          - lvgl.label.update:
                                              id: radio_all_text44
                                              text: "${Radio_frequency_f19}Mhz" 
 
      #---------------------^--------------------------------------------------   
                            # ⬆️ UP 버튼
                            - button:
                                id: btn_up_radio
                                align: BOTTOM_LEFT
                                x: 0
                                y: 0
                                width: 80
                                height: 50
                                # text: "^" # "⬆"
                                on_press:
                                  then:
                                    # - lambda: |-
                                    - lambda: |-
                                        auto roller = id(radio_media_player_speaker_44);
                                        std::vector<std::string> options = roller->get_options();
                                        int selected_index = std::distance(options.begin(), std::find(options.begin(), options.end(), roller->get_selected_text()));
                                        if (selected_index > 0) {
                                          roller->set_selected_text(options[selected_index - 1].c_str(), LV_ANIM_ON);
                                        }

                                widgets:                                  
                                  - label:
                                      align: CENTER
                                      text: "<-"
                                      text_font: font_40
                                      text_color: 0xFFFF00                                  

                            # ⬇️ DOWN 버튼
                            - button:
                                id: btn_down_radio
                                align: BOTTOM_RIGHT
                                x: 0
                                y: 0
                                width: 80
                                height: 50
                                # text: "⬇"
                                on_press:
                                  then:
                                    # - lambda: |-
                                    - lambda: |-
                                        auto roller = id(radio_media_player_speaker_44);
                                        std::vector<std::string> options = roller->get_options();
                                        int selected_index = std::distance(options.begin(), std::find(options.begin(), options.end(), roller->get_selected_text()));
                                        if (selected_index < options.size() - 1) {
                                          roller->set_selected_text(options[selected_index + 1].c_str(), LV_ANIM_ON);
                                        }
                                                                
                                widgets:                                  
                                  - label:
                                      align: CENTER
                                      text: "->"
                                      text_font: font_40
                                      text_color: 0xFFFF00                                      
                        
      # ==========^======^=======================================================================
      # 라디오 URL 복사 끝
      # --------------------^--------------------------------------------------- hub end radio

                            - image:
                                x: 30
                                y: 20
                                align: Center
                                id: media_player_png_playing_image_widget_1
                                src: icons8_nosound_png # playing_gif  icons8_sound_png 서재
                                antialias: true
                                zoom: 2.0   #확대 배율
                            # Arc 위젯  # 라디오 
                            - arc:  # 라디오 볼륨
                                x: -10
                                y: 20
                                width: 120
                                height: 120
                                border_width: 0
                                bg_opa: TRANSP
                                align: RIGHT_MID
                                adjustable: true
                                min_value: 0
                                max_value: 100
                                arc_width: 30
                                id: aircon_set_temp_arc44
                                indicator:
                                  arc_color: 0x007BB0
                                  arc_width: 30
                                on_value:
 
                                  - lvgl.label.update: 
                                      id: volume_label_44
                                      text: !lambda |-
                                        static char buf[15];
                                        snprintf(buf, sizeof(buf), "%.0f%%", x); 
                                        return {buf};
                                  - delay: 100ms  # 약간의 지연
                                  
                                on_release:  # 사용자가 손을 뗄 때 실행
                                  - delay: 100ms  # 약간의 지연
                                  - homeassistant.action:
                                      action: media_player.volume_set
                                      data:
                                        entity_id: !lambda 'return id(selected_media_entity).state;'   
                                        volume_level: !lambda 'return (x / 100);' 
      

                            - label:
                                id: volume_label_44  # 텍스트 라벨 ID 정의 ${media_entities_1_1} # change item
                                x: 25
                                y: 50
                                width: 150
                                height: 100
                                align: CENTER
                                text: "00%"  # 초기 텍스트 값 볼륨표시
                                text_font: font_40
                                text_color: 0xFFA500
                                text_align: CENTER
                            - label:
                                # id: volume_label_44  # 텍스트 라벨 ID 정의 ${media_entities_1_1} # change item
                                x: 155
                                y: 55
                                width: 150
                                height: 100
                                align: CENTER
                                text: "볼륨"  # 초기 텍스트 값 볼륨표시
                                text_font: font_25
                                text_color: 0xFFA500
                                text_align: CENTER

                            # - button:
                            - button:
                                x: 0
                                y: 30 
                                align: TOP_LEFT
                                width: 150
                                height: 50
                                radius: 30
                                checkable: true
                                id: media_player_off_widget_11
                                widgets:
                                  - label:
                                      id: media_player_off_label_11
                                      y: 3
                                      align: CENTER
                                      text_font: font_25
                                      text_color: 0xFFFF00
                                      text: "\U000F0425 서재 \U000F057E"   # font_25
                                      text_align: LEFT                                      
                                on_click:
                                  then:
                                    - lambda: |-
                                        auto current_state = id(selected_media_entity).state;

                                        // 이전 상태를 업데이트
                                        id(previous_media_entity).publish_state(current_state);

                                        // 새로운 상태 설정
                                        id(selected_media_entity).publish_state("${media_entities_1}");

                                    - lvgl.label.update:
                                        id: previous_media_label
                                        text: !lambda |-
                                          return ("(서재) " + id(previous_media_entity).state).c_str();

                                    - homeassistant.service:
                                        service: media_player.toggle
                                        data_template:
                                          entity_id: !lambda 'return id(selected_media_entity).state;'


                            - button:
                                x: 150
                                y: 30 
                                align: TOP_LEFT
                                width: 150
                                height: 50
                                radius: 30
                                checkable: true
                                id: media_player_off_widget_22
                                widgets:
                                  - label:
                                      id: media_player_off_label_22
                                      y: 3
                                      align: CENTER
                                      text_font: font_25
                                      text_color: 0xFFFF00
                                      text: "\U000F0425 거실 \U000F057E"
                                      text_align: LEFT                                        
                                on_click:
                                  then:
                                    - lambda: |-
                                        auto current_state = id(selected_media_entity).state;

                                        // 이전 상태를 업데이트
                                        id(previous_media_entity).publish_state(current_state);

                                        // 새로운 상태 설정
                                        id(selected_media_entity).publish_state("${media_entities_2}");

                                    - lvgl.label.update:
                                        id: previous_media_label
                                        text: !lambda |-
                                          return ("(거실) " + id(previous_media_entity).state).c_str();

                                    - homeassistant.service:
                                        service: media_player.toggle
                                        data_template:
                                          entity_id: !lambda 'return id(selected_media_entity).state;'                  
                            - button:
                                x: 300
                                y: 30 
                                align: TOP_LEFT
                                width: 150
                                height: 50
                                radius: 30
                                checkable: true
                                id: media_player_off_widget_33
                                widgets:
                                  - label:
                                      id: media_player_off_label_33
                                      y: 3
                                      align: CENTER
                                      text_font: font_25
                                      text_color: 0xFFFF00
                                      text: "\U000F0425 안방 \U000F057E"
                                      text_align: LEFT                                        
                                on_click:
                                  then:
                                    - lambda: |-
                                        auto current_state = id(selected_media_entity).state;

                                        // 이전 상태를 업데이트
                                        id(previous_media_entity).publish_state(current_state);

                                        // 새로운 상태 설정
                                        id(selected_media_entity).publish_state("${media_entities_3}");

                                    - lvgl.label.update:
                                        id: previous_media_label
                                        text: !lambda |-
                                          return ("(안방) " + id(previous_media_entity).state).c_str();
  
                                    - homeassistant.service:
                                        service: media_player.toggle
                                        data_template:
                                          entity_id: !lambda 'return id(selected_media_entity).state;'                                         
 
                            - label:
                                x: 0
                                y: -20
                                width: 270
                                height: 30
                                align: BOTTOM_MID
                                text: "스피커선택후 방송선택 됩니다"  # font_20 송하 # font_25 않을때
                                id: previous_media_label
                                text_font: font_20
                                text_color: 0xFFFF00
                                text_align: LEFT   
                                long_mode: SCROLL_CIRCULAR       

                            - label:
                                x: 0
                                y: 0                              
                                align: BOTTOM_MID
                                id: radio_all_text44
                                text: "소리가나지 않을때 >esphome구성 설정하세요" # font_25 않을때
                                text_font: font_25
                                text_align: LEFT
                                width: 250  # ← 중요! 글자보다 짧게
                                long_mode: SCROLL_CIRCULAR

# --------------------^---------------------------------------------          
                            - obj:
                                x: -5
                                y: 5
                                align: TOP_RIGHT
                                width: 300
                                height: 50
                                styles: style_time
                                widgets:            
                                  - label:
                                      align: TOP_LEFT
                                      text: "@Radio_tab_3" ## ${tabview_id_5}   # menupage    weather_tab  
                                      text_color: 0x00FFFF
                                      text_font: font_20                              
# 00000000000000000000000000000000000000000000000000000

## ============  추가적으로 계속복사 메뉴 복사 =========================
                  - name: "\U000F151B"
                    id: info_tab
# ==================>=================================================              
# ==================>=================================================              
                    widgets:
                    - obj:
                        x: -5
                        y: 5
                        align: TOP_LEFT          
                        bg_color: 0x000000
                        bg_opa: 30%
                        styles: style_card
                        width: 100%
                        height: 270 # tabview 의 제외 영역
                        widgets:  
### 999999999999999999999999999999999999999999999999999999999999999999999999999999
                          - obj:
                              x: 0
                              y: 0
                              align: TOP_MID          
                              styles: style_time
                              width: 100%
                              height: 260
                              widgets:        
##### 9999999999999999999999999999999999999999999999999999999999999999999999999999 update_date
                                                   

                                - label:
                                    align: TOP_MID
                                    y: 2 # distance down from top
                                    text: "@tab_info"
                                    text_color: 0x00FFFF   
                                    text_font: font_15
 
#------------------------------------------------------
                                - spinner:
                                    align: TOP_LEFT
                                    x: 10
                                    y: 100
                                    spin_time: 5s
                                    arc_length: 20deg
                                    arc_color: 0xff0000  # 빨강 (Red)
                                    id: spinner_id
                                    indicator:
                                      arc_color: 0x00ff00  # 초록 (Green)
                                    styles: style_time

                                - spinner:
                                    align: TOP_MID
                                    x: 10
                                    y: 100
                                    spin_time: 5s
                                    arc_length: 20deg
                                    arc_color: 0x00ff00  # 초록 (Green) ## 0x0000ff  # 파랑 (Red)
                                    id: spinner_id2
                                    indicator:
                                      arc_color: 0x0000ff  # 파랑 (Blue)
                                    styles: style_time  
      
                                - spinner:
                                    align: TOP_RIGHT
                                    x: 10
                                    y: 100
                                    spin_time: 5s
                                    arc_length: 20deg
                                    arc_color: 0x0000ff  # 파랑 (Blue)
                                    id: spinner_id3
                                    indicator:
                                      arc_color: 0xff0000  # 빨강 (Red)
                                    styles: style_time  
 

# -----------------------------------------------------
                                - label:
                                    x: 0
                                    y: 30
                                    align: TOP_MID
                                    text: ${update_date} # 버전표기
                                    text_font: font_30
                                    text_color: 0xFFFFFF
                                    text_align: CENTER
                                    # styles: style_card]
                                    styles: style_time

                                - label:
                                    x: 0
                                    y: 80
                                    align: TOP_MID
                                    text: "esphome_version" #  esp32 버전
                                    text_font: font_20
                                    text_color: 0xFFFFFF
                                    text_align: CENTER
                                    id: install_esphome_version_txt
                                    styles: style_time                                    
                                  # esphome_version: "sensor.3_display_ip93_esphome_version"

                                - button:
                                    align: TOP_LEFT
                                    x: 30
                                    y: 120
                                    width: 180
                                    height: 50
                                    bg_color: 0x2F8CD8
                                    outline_width: 1
                                    widgets:
                                      - label:
                                          align: LEFT_MID  # Center the label vertically and horizontally                                    
                                          text_font: font_30  # Adjust text font size
                                          text: "\U000F0D90" #U000F0425" # POWER ICON F0425  
                                          text_align: LEFT
                                          text_color: 0xFF0000       
                                          x: -10                               
                                      - label:
                                          align: RIGHT_MID
                                          text: "backlight_off"
                                          text_font: font_20
                                          text_color: 0xFFFFFF                                

                                    on_press:   
                                      - switch.turn_off:   # 
                                          id: backlight_switch_id          
                                                                                   

                                - slider:
                                    x: 220
                                    y: 120
                                    align: TOP_LEFT
                                    id: slide_brightness
                                    width: 200
                                    height: 50
                                    value: !lambda return id(backlight_brightness_number).state;
                                    pad_all: 2
                                    min_value: 10
                                    max_value: 90 
                                    border_width: 1
                                    border_opa: 15%
                                    bg_color: 0xcccaca
                                    bg_opa: 15%                                
                                    indicator:
                                      bg_color: 0x2F8CD8
                                      bg_opa: COVER
                                      height: 40
                                    knob:
                                      bg_color: 0xFFFFFF  #2F8CD8                                                            
                                      bg_opa: COVER
                                      width: 45
                                      border_color: 0x0077b3        
                                      border_width: 5
                                      outline_width: 1                              

                                    on_release:
                                      then:
                                      - light.control:
                                          id: backlight_light_id
                                          brightness: !lambda return x / 100;

                                      - number.set:
                                          id: backlight_brightness_number
                                          value: !lambda return x;

# -------------------------------------------------------------
                                - label:
                                    x: 250
                                    y: 120 
                                    id: back_light_in_text # UI TEXT 백라이트 밝기 표시                              
                                    text: "50%"
                                    text_font: font_40
                                    text_color: 0xFFA500
                                    align: TOP_LEFT    

                                - button:
                                    align: BOTTOM_LEFT
                                    x: 0
                                    y: 0 
                                    width: 200
                                    height: 50
                                    bg_color: 0x2F8CD8
                                    outline_width: 1
                                    widgets:
                                      - label:
                                          align: CENTER
                                          text: "Reboot"
                                              # "재시작 > AP가 작동하지 않고 와이파이 신호가 약함시 재부팅"
                                          text_font: font_30
                                          text_color: 0xFFFFFF                                

                                    on_press:   
                                      - switch.turn_on:   # 재시작배부팅 동작 restart_node
                                          id: restart_id    
  

                                - button:
                                    align: BOTTOM_RIGHT
                                    x: 0
                                    y: 0 
                                    width: 200
                                    height: 50
                                    bg_color: 0x2F8CD8
                                    outline_width: 1
                                    widgets:
                                      - label:
                                          align: CENTER
                                          text: 'page_booting' #  
                                          text_font: font_30
                                          text_color: 0xFFFFFF                                

                                    on_press:   
                                      - lvgl.page.show: page_booting

 ##################^##########################################
## ============  추가적으로 계속복사 메뉴 복사 =========================
                  - name:   .
# ==========>=========================================  #back_icon - tabview:  위치에 추가             
            - button:
                align: BOTTOM_RIGHT
                width: 60
                height: 30
                bg_color: 0x0000FF # 0x2F8CD8  
                radius: 10          # ✅ 원형 버튼는 width와 height 동일사이즈 1/2 이면 30 30 15 OK 
                outline_width: 1    # ✅ 테두리는 생기지만 둥글지 않음 (각진 테두리 허용)
                x: 0
                widgets:
                  - label:
                      align: CENTER
                      text: "\U000F0CDD"  # back_icon  20 font
                      text_font: icon_font_30
                      text_color: 0xFFFFFF
                      
                on_press:
                  then:
                    - lvgl.page.show: all_page_menu
                    - delay: 500ms
                    - lvgl.tabview.select:
                        id: tabview_all_page_menu
                        index: 0
                        animated: true


## ============  추가적으로 계속복사 메뉴 복사 =========================

 